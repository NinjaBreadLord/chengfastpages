{
  
    
        "post0": {
            "title": "2022-09-01 Java Objects Notes",
            "content": "Control Menu . Simple challenge to add a fourth case to the code provided . Documentation . Within the code the Class is defined by &#39;public Menu&#39;, aka the constructor of the object public Menu() { . | Usage of instance variables public final String DEFAULT = &quot; u001B[0m&quot;; // Default Terminal Color public final String[][] COLORS = { // 2D Array of ANSI Terminal Colors {&quot;Default&quot;,DEFAULT}, {&quot;Red&quot;, &quot; u001B[31m&quot;}, {&quot;Green&quot;, &quot; u001B[32m&quot;}, {&quot;Yellow&quot;, &quot; u001B[33m&quot;}, {&quot;Blue&quot;, &quot; u001B[34m&quot;}, {&quot;Purple&quot;, &quot; u001B[35m&quot;}, {&quot;Cyan&quot;, &quot; u001B[36m&quot;}, {&quot;White&quot;, &quot; u001B[37m&quot;}, }; . | Object calling method main Menu.main(null); . | Mutation instance int random = (int) (Math.random() * COLORS.length); // random logic . | . Menu Code . Simple code with the console menu and math classes | Mainly trigonomic functions added + random Chinese character maker | . import java.lang.Math; import java.util.*; public class Menu { public final String DEFAULT = &quot; u001B[0m&quot;; public final String[][] COLORS = { {&quot;Default&quot;,DEFAULT}, {&quot;Red&quot;, &quot; u001B[31m&quot;}, {&quot;Green&quot;, &quot; u001B[32m&quot;}, {&quot;Yellow&quot;, &quot; u001B[33m&quot;}, {&quot;Blue&quot;, &quot; u001B[34m&quot;}, {&quot;Purple&quot;, &quot; u001B[35m&quot;}, {&quot;Cyan&quot;, &quot; u001B[36m&quot;}, {&quot;White&quot;, &quot; u001B[37m&quot;}, }; public final int NAME = 0; public final int ANSI = 1; public Menu() { Scanner sc = new Scanner(System.in); this.print(); boolean quit = false; while (!quit) { try { int choice = sc.nextInt(); System.out.print(&quot;&quot; + choice + &quot;: &quot;); quit = this.action(choice); } catch (Exception e) { sc.nextLine(); System.out.println(e + &quot;: Not a choice&quot;); } } sc.close(); } private void print() { System.out.println(&quot;-&quot;); System.out.println(&quot;Java Math&quot;); System.out.println(&quot;-&quot;); System.out.println(&quot;1 - Degrees to Radians Converter&quot;); System.out.println(&quot;2 - Radians to Tangent&quot;); System.out.println(&quot;3 - Radians to Cosine&quot;); System.out.println(&quot;4 - Radians to Sine&quot;); System.out.println(&quot;5 - Random output of numbers and then converted to ASCII&quot;); System.out.println(&quot;0 - Quit&quot;); System.out.println(&quot;-&quot;); } private boolean action(int selection) { boolean quit = false; Scanner input = new Scanner(System.in); switch (selection) { case 0: System.out.print(&quot;Cya&quot;); quit = true; break; case 1: System.out.println(&quot;Enter an amount of degrees: &quot;); double degrees = input.nextDouble(); System.out.println(Math.toRadians(degrees)); case 2: System.out.println(&quot;Enter radians: &quot;); double radians = input.nextDouble(); System.out.print(&quot;Here is your sine value: &quot; + Math.sin(radians)); break; case 3: System.out.println(&quot;Enter radians: &quot;); radians = input.nextDouble(); System.out.print(&quot;Here is your tangent value: &quot; + Math.tan(radians)); break; case 4: System.out.println(&quot;Enter radians: &quot;); radians = input.nextDouble(); System.out.print(&quot;Here is your cosine value: &quot; + Math.cos(radians)); break; case 5: int random1 = 0; int i = 0; int l = 0; int[] asciiList = new int[10]; for(i = 0; i &lt; asciiList.length; i++){ random1 = (int)(Math.random()*100 +20000); asciiList[i] = random1; } System.out.println(&quot;Here is your list of random Chinese characters using Math.random: &quot;); for(int element: asciiList){ System.out.print((char)element + &quot;, &quot;); } break; default: System.out.print(&quot;Unexpected choice, try again.&quot;); } System.out.println(DEFAULT); return quit; } static public void main(String[] args) { new Menu(); } } Menu.main(null); . - Java Math - 1 - Degrees to Radians Converter 2 - Radians to Tangent 3 - Radians to Cosine 4 - Radians to Sine 5 - Random output of numbers and then converted to ASCII 0 - Quit - 5: Here is your list of random Chinese characters using Math.random: 乱, 乊, 丠, 乗, 乃, 丯, 乮, 乀, 乑, 乥, 0: Cya .",
            "url": "https://ninjabreadlord.github.io/chengfastpages/2022/09/05/javaobjects.html",
            "relUrl": "/2022/09/05/javaobjects.html",
            "date": " • Sep 5, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "Plans",
            "content": "Capturing information from Collegeboard . With Collegeboard’s 10 units I hope to capture most of the information from there onto JupyterNotebook. With each CollegeBoard unit I plan on creating a seperate notebook entailing all the information and details. For certain units I may try and apply that using the kernels on each notebooks | For FRQs I believe that a similar method should be used, I’ll likely organize frq questions into seperate folders with code answering the questions. | . Recognizing Collegeboard vs PBL . Continuing off of what I stated before, I hope to have seperate folders and tags(WIP) for Collegeboard materials and information. | PBL will be placed in a seperate folder and tagging system. | .",
            "url": "https://ninjabreadlord.github.io/chengfastpages/2022/08/28/plansforcollegeboard.html",
            "relUrl": "/2022/08/28/plansforcollegeboard.html",
            "date": " • Aug 28, 2022"
        }
        
    
  
    
        ,"post2": {
            "title": "2022-08-25 Bash Notes",
            "content": "Installlation . pip install bash_kernel | python -m bash_kernel.install | . echo &quot;Using conditional statement to create a project directory and project&quot; # Variable section export project_dir=$HOME/vscode # change vscode to different name to test git clone export project=$project_dir/APCSA # change APCSP to name of project from git clone export project_repo=&quot;https://github.com/nighthawkcoders/APCSA.git&quot; # change to project of choice cd ~ # start in home directory # Conditional block to make a project directory if [ ! -d $project_dir ] then echo &quot;Directory $project_dir does not exists... makinng directory $project_dir&quot; mkdir -p $project_dir fi echo &quot;Directory $project_dir exists.&quot; # Conditional block to git clone a project from project_repo if [ ! -d $project ] then echo &quot;Directory $project does not exists... cloning $project_repo&quot; cd $project_dir git clone $project_repo cd ~ fi echo &quot;Directory $project exists.&quot; . Using conditional statement to create a project directory and project Directory /home/everittcheng/vscode exists. Directory /home/everittcheng/vscode/APCSA exists. . &quot;cat&quot; command shows you text from inside the file | &quot;env&quot; shows enviroment | &quot;.git&quot; hidden file that keeps track of your merges, basically keeps your machine and the github cloud server in check to see when files need to change | . Hacks . Verifying installed tools . Anaconda to verify that google exists . export PATH=~/anaconda3/bin:$PATH # conda not found without this command echo Conda Check # test for a kernel installation test=&quot;google&quot; # keyword check=`conda list | grep $test` # run command n=${#check} # determine length if [[ ${n} &gt; 0 ]]; # testt length then # greater than zero echo &quot;$check&quot; else # less than zero echo &quot;$test not found&quot; fi . Conda Check google-api-core 1.25.1 pyhd3eb1b0_0 google-auth 1.33.0 pyhd3eb1b0_0 google-cloud-core 1.7.1 pyhd3eb1b0_0 google-cloud-storage 1.31.0 py_0 google-crc32c 1.1.2 py39h27cfd23_0 google-resumable-media 1.3.1 pyhd3eb1b0_1 googleapis-common-protos 1.53.0 py39h06a4308_0 . Check if I have bash . test=&quot;bash&quot; # keyword check=`jupyter kernelspec list | grep $test` # run command n=${#check} # determine length if [[ ${n} &gt; 0 ]]; # testt length then # greater than zero echo &quot;$check&quot; else # less than zero echo &quot;$test not found&quot; fi . bash /home/everittcheng/.local/share/jupyter/kernels/bash . Check for python . test=&quot;python3&quot; # keyword check=`jupyter kernelspec list | grep $test` # run command n=${#check} # determine length if [[ ${n} &gt; 0 ]]; # testt length then # greater than zero echo &quot;$check&quot; else # less than zero echo &quot;$test not found&quot; fi . python3 /home/everittcheng/.local/share/jupyter/kernels/python3 . Update repository . cd $project echo &quot;Updating..............&quot; git pull . Updating.............. Already up to date. .",
            "url": "https://ninjabreadlord.github.io/chengfastpages/apcsa/2022/08/25/bashnotebooknotes.html",
            "relUrl": "/apcsa/2022/08/25/bashnotebooknotes.html",
            "date": " • Aug 25, 2022"
        }
        
    
  
    
        ,"post3": {
            "title": "2022-08-23 Primitive Notes",
            "content": "Primitives . Basica bread and butter variable types(ie: String, int, etc.) | . Wrapper Classes . Wrappers usually uppercase in defining variable | Most in Java is OOP exclude primitives | . Hacks . import java.util.*; public class SimpleCalculator { public static void main(String[] args) { Scanner input1 = new Scanner(System.in); System.out.println(&quot;Enter an integer for joe: &quot;); int joe = input1.nextInt(); input1.close(); Scanner input2 = new Scanner(System.in); System.out.println(&quot;Enter a integer for joey: &quot;); int joey = input2.nextInt(); input2.close(); double amogus = (double) joe + joey; String joseph = &quot;Hello I am Joseph&quot;; System.out.println(&quot;I want to add joe and joey&quot;); Scanner input3 = new Scanner(System.in); System.out.println(&quot;Do I add joe and joey(True/False): &quot;); boolean joel = input3.nextBoolean(); if(joel){ System.out.println(joseph + &quot;, if I add joe(&quot; + joe + &quot;) and joey(&quot; + joey + &quot;) it gets me &quot; + amogus); }else{ System.out.println(&quot;I guess joe and joey will never meet. The name&#39;s Joseph by the way&quot;); } } } SimpleCalculator.main(null); . Enter an integer for joe: Enter a integer for joey: I want to add joe and joey Do I add joe and joey(True/False): Hello I am Joseph, if I add joe(12) and joey(123) it gets me 135.0 . Seconds to Fortnight Converter . import java.util.*; public class main{ public static double fortnightConverter(double fortnight) { double days = fortnight*14; double seconds = days * 86400; return seconds; } public static void main(String[] args){ Scanner input = new Scanner(System.in); System.out.println(&quot;How many fortnights?: &quot;); double fortnight = input.nextDouble(); System.out.println(fortnight + &quot; fortnight in seconds is: &quot; + fortnightConverter(fortnight)); } } main.main(null); . How many fortnights?: 1.0 fortnight in seconds is: 1209600.0 .",
            "url": "https://ninjabreadlord.github.io/chengfastpages/apcsa/2022/08/23/primitives-notes.html",
            "relUrl": "/apcsa/2022/08/23/primitives-notes.html",
            "date": " • Aug 23, 2022"
        }
        
    
  
    
        ,"post4": {
            "title": "Code Testing Python",
            "content": "Here is some Python code. It should be a simple function that prints out &quot;Hello&quot;. . print(&quot;Hello&quot;) . Hello .",
            "url": "https://ninjabreadlord.github.io/chengfastpages/apcsa/2022/08/21/pythoncodetest.html",
            "relUrl": "/apcsa/2022/08/21/pythoncodetest.html",
            "date": " • Aug 21, 2022"
        }
        
    
  
    
        ,"post5": {
            "title": "Code Testing Java",
            "content": "Here is some Java code. Testing the print function, should print &quot;Hello&quot;. . System.out.println(&quot;Hello&quot;) . Hello .",
            "url": "https://ninjabreadlord.github.io/chengfastpages/apcsa/2022/08/21/javacodetest.html",
            "relUrl": "/apcsa/2022/08/21/javacodetest.html",
            "date": " • Aug 21, 2022"
        }
        
    
  
    
        ,"post6": {
            "title": "First Post",
            "content": "Hello . This is my first post, just testing out markdown . I am excited for APCSA this year | . Link back to main page .",
            "url": "https://ninjabreadlord.github.io/chengfastpages/apcsa/2022/08/21/firstpost.html",
            "relUrl": "/apcsa/2022/08/21/firstpost.html",
            "date": " • Aug 21, 2022"
        }
        
    
  
    
        ,"post7": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://ninjabreadlord.github.io/chengfastpages/apcsa/2020/02/20/test.html",
            "relUrl": "/apcsa/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post8": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://ninjabreadlord.github.io/chengfastpages/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://ninjabreadlord.github.io/chengfastpages/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
      ,"page3": {
          "title": "APCSA Notes",
          "content": "Vocab and notes on APCSA concepts throughout 2022-2023 . Table of Contents . Week 1 Notes .",
          "url": "https://ninjabreadlord.github.io/chengfastpages/notes/",
          "relUrl": "/notes/",
          "date": ""
      }
      
  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page11": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://ninjabreadlord.github.io/chengfastpages/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}