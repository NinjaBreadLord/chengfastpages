{
  
    
        "post0": {
            "title": "Units 6 - 10",
            "content": "// Unit 7 import java.util.*; public class hack1{ public static void main (String[] args){ ArrayList&lt;String&gt; cool = new ArrayList(); System.out.println(cool.size()); } } hack1.main(null); . 0 . import java.util.*; ArrayList&lt;String&gt; color = new ArrayList(); color.add(&quot;red apple&quot;); color.add(&quot;green box&quot;); color.add(&quot;blue water&quot;); color.add(&quot;red panda&quot;); for(int i = 0; i &lt;= color.size(); i++){ if(color.get(i).contains(&quot;red&quot;)){ color.remove(i); } } System.out.println(color) . [green box, blue water] . Unit 7 Vocab . Array List - Similar to an array, however the length of the list can be modified when need be Can iterate through it similar to an array, however putting and removing items are different syntax | . | . public class Test { public static void main(String[] args) { String[][] arr = { // two indexes, to help store data in a 2D model { &quot;Atlanta&quot;, &quot;Baltimore&quot;, &quot;Chicago&quot; }, { &quot;Australia&quot;, &quot;Boston&quot;, &quot;Cincinnati&quot; }, { &quot;Austin&quot;, &quot;Beaumont&quot;, &quot;Columbus&quot; } }; String longest = arr[0][0]; //defining the longest array at the moment for(int row = 0; row &lt; arr.length; row++) { //incrementing through each part to find largest string for(int column = 0; column &lt; arr[row].length; column++) { if (arr[row][column].length() &gt; longest.length()) { longest = arr[row][column]; } } } System.out.println(longest); // Use nested for loops to find the longest or shortest string! System.out.println(&quot;Use nested for loops to find the longest or shortest string!&quot;); } } Test.main(null); . Cincinnati Use nested for loops to find the longest or shortest string! . Unit 8 Vocab . Usage of a nested for loop to iterate through a 2D Array, through each &quot;cell&quot; . | Declared with two brackets next to name . | . public class Animal { protected double mass; protected double lifespan; public Animal(double mass, double lifespan) { this.mass = mass; this.lifespan = lifespan; } public void sound() { System.out.println(&quot;sound&quot;); } public void die(boolean a) { System.out.println(&quot;the cat is dead: &quot; + a); //method to be overloaded } public class Dog extends Animal { protected String color; public Dog(double mass, double lifespan, String color) { super(mass, lifespan); this.color = color; } @Override public void sound() { System.out.println(&quot;woof&quot;); } } public class Cat extends Animal { //make another subclass for Cat that extends off of Animal protected String breed; public Cat(double mass, double lifespan, String breed) { super(mass, lifespan); this.breed = breed; } @Override public void sound() { //overrides the sound System.out.println(&quot;meow&quot;); } public void die(boolean a, boolean b) { //method overloading System.out.println(&quot;the cat is dead: &quot; + a + b); } } } . Unit 9 Vocab . Inheritance/extends takes aspects of an existing class and replicates it within another class using the extends method, simplifying code by a lot. | Subclass/Super - A subclass constructor forms after extending a previous class, and using the super(); method will take a method and replicate it in the new class. | Overloading - When you use the same method name in a class each with different parameters. | Override - When a subclass has the same name and parameters as the parent class | Polymorphism - any of overloading, overriding, late bindingMultiple methods with the same name but different parameters | . No code for lesson 10 . Recursion - method calling itself again, similar to a loop | Base case - the condition passed that is needed to be reached to end the loop | Binary search - Split the array in half and then continue doing so until the value is found | Selection - finds minimum element from unsorted part and puts it at end of sorted part | Merge - splits array into 2, calls it self into two sorted halves, and then merges all the havles back into arrayList | .",
            "url": "https://ninjabreadlord.github.io/chengfastpages/2023/03/10/unit6to10vocab.html",
            "relUrl": "/2023/03/10/unit6to10vocab.html",
            "date": " • Mar 10, 2023"
        }
        
    
  
    
        ,"post1": {
            "title": "Title",
            "content": "import java.util.HashMap; import java.util.Map; public class Light { boolean on; short red; short green; short blue; short effect; /* ANSI effects n Name Note 0 Reset or normal All attributes off 1 Bold or increased intensity As with faint, the color change is a PC (SCO / CGA) invention.[38][better source needed] 2 Faint, decreased intensity, or dim May be implemented as a light font weight like bold.[39] 3 Italic Not widely supported. Sometimes treated as inverse or blink.[38] 4 Underline Style extensions exist for Kitty, VTE, mintty and iTerm2.[40][41] 5 Slow blink Sets blinking to less than 150 times per minute 6 Rapid blink MS-DOS ANSI.SYS, 150+ per minute; not widely supported 7 Reverse video or invert Swap foreground and background colors; inconsistent emulation[42] 8 Conceal or hide Not widely supported. 9 Crossed-out, or strike Characters legible but marked as if for deletion. Not supported in Terminal.app */ private final Map&lt;Short, String&gt; EFFECT = new HashMap&lt;&gt;(); { // Map&lt;&quot;separator&quot;, not_used&gt; EFFECT.put((short) 0, &quot;Normal&quot;); EFFECT.put((short) 1, &quot;Bold&quot;); EFFECT.put((short) 2, &quot;Faint&quot;); EFFECT.put((short) 3, &quot;Italic&quot;); EFFECT.put((short) 4, &quot;Underline&quot;); EFFECT.put((short) 5, &quot;Slow Blink&quot;); EFFECT.put((short) 6, &quot;Fast Blink&quot;); EFFECT.put((short) 7, &quot;Reverse&quot;); EFFECT.put((short) 8, &quot;Conceal&quot;); EFFECT.put((short) 9, &quot;Crossed_out&quot;); } /* Assign random colors and effects */ public Light() { int maxColor = 255; int effect = 9; this.red = (short) (Math.random()*(maxColor+1)); this.green = (short) (Math.random()*(maxColor+1)); this.blue = (short) (Math.random()*(maxColor+1)); this.effect = (short) (Math.random()*(effect+1)); } public String getEffectTitle() { return EFFECT.get(this.effect); } public String getRGB() { return ( &quot;#&quot; + String.format(&quot;%02X&quot;, this.red) + String.format(&quot;%02X&quot;, this.green) + String.format(&quot;%02X&quot;, this.blue) ); } /* toString output as key/values */ public String toString() { return( &quot;{&quot; + &quot; &quot;red &quot;: &quot; + red + &quot;,&quot; + &quot; &quot;green &quot;: &quot; + green + &quot;,&quot; + &quot; &quot;blue &quot;: &quot; + blue + &quot;,&quot; + &quot; &quot;effect &quot;: &quot; + &quot; &quot;&quot; + EFFECT.get(effect) + &quot; &quot;&quot; + &quot;}&quot; ); } public boolean isOn() { return on; } public void setOn(boolean on) { this.on = on; } public short getRed() { return red; } public short getGreen() { return green; } public short getBlue() { return blue; } public short getEffect() { return effect; } static public void main(String[] args) { // create and display LightBoard Light light = new Light(); System.out.println(light); // use toString() method } } Light.main(null); . {&#34;red&#34;: 123,&#34;green&#34;: 87,&#34;blue&#34;: 171,&#34;effect&#34;: &#34;Reverse&#34;} . public class LightBoard { private Light[][] lights; /* Initialize LightBoard and Lights */ public LightBoard(int numRows, int numCols) { this.lights = new Light[numRows][numCols]; // 2D array nested loops, used for initialization for (int row = 0; row &lt; numRows; row++) { for (int col = 0; col &lt; numCols; col++) { lights[row][col] = new Light(); // each cell needs to be constructed } } } /* Output is intended for API key/values */ public String toString() { String outString = &quot;[&quot;; // 2D array nested loops, used for reference for (int row = 0; row &lt; lights.length; row++) { for (int col = 0; col &lt; lights[row].length; col++) { outString += // data &quot;{&quot; + &quot; &quot;row &quot;: &quot; + row + &quot;,&quot; + &quot; &quot;column &quot;: &quot; + col + &quot;,&quot; + &quot; &quot;light &quot;: &quot; + lights[row][col] + // extract toString data &quot;},&quot; ; } } // remove last comma, newline, add square bracket, reset color outString = outString.substring(0,outString.length() - 1) + &quot;]&quot;; return outString; } /* Output is intended for Terminal, effects added to output */ public String toTerminal() { String outString = &quot;[&quot;; // 2D array nested loops, used for reference for (int row = 0; row &lt; lights.length; row++) { for (int col = 0; col &lt; lights[row].length; col++) { outString += // reset &quot; 033[m&quot; + // color &quot; 033[38;2;&quot; + lights[row][col].getRed() + &quot;;&quot; + // set color using getters lights[row][col].getGreen() + &quot;;&quot; + lights[row][col].getBlue() + &quot;;&quot; + lights[row][col].getEffect() + &quot;m&quot; + // data, extract custom getters &quot;{&quot; + &quot; &quot;&quot; + &quot;RGB &quot;: &quot; + &quot; &quot;&quot; + lights[row][col].getRGB() + &quot; &quot;&quot; + &quot;,&quot; + &quot; &quot;&quot; + &quot;Effect &quot;: &quot; + &quot; &quot;&quot; + lights[row][col].getEffectTitle() + &quot; &quot;&quot; + &quot;},&quot; + // newline &quot; n&quot; ; } } // remove last comma, newline, add square bracket, reset color outString = outString.substring(0,outString.length() - 2) + &quot; 033[m&quot; + &quot;]&quot;; return outString; } /* Output is intended for Terminal, draws color palette */ public String toColorPalette() { // block sizes final int ROWS = 5; final int COLS = 10; // Build large string for entire color palette String outString = &quot;&quot;; // find each row for (int row = 0; row &lt; lights.length; row++) { // repeat each row for block size for (int i = 0; i &lt; ROWS; i++) { // find each column for (int col = 0; col &lt; lights[row].length; col++) { // repeat each column for block size for (int j = 0; j &lt; COLS; j++) { // print single character, except at midpoint print color code String c = (i == (int) (ROWS / 2) &amp;&amp; j == (int) (COLS / 2) ) ? lights[row][col].getRGB() : (j == (int) (COLS / 2)) // nested ternary ? &quot; &quot;.repeat(lights[row][col].getRGB().length()) : &quot; &quot;; outString += // reset &quot; 033[m&quot; + // color &quot; 033[38;2;&quot; + lights[row][col].getRed() + &quot;;&quot; + lights[row][col].getGreen() + &quot;;&quot; + lights[row][col].getBlue() + &quot;;&quot; + &quot;7m&quot; + // color code or blank character c + // reset &quot; 033[m&quot;; } } outString += &quot; n&quot;; } } // remove last comma, newline, add square bracket, reset color outString += &quot; 033[m&quot;; return outString; } static public void main(String[] args) { // create and display LightBoard LightBoard lightBoard = new LightBoard(5, 5); // System.out.println(lightBoard); // use toString() method // System.out.println(lightBoard.toTerminal()); System.out.println(lightBoard.toColorPalette()); } } LightBoard.main(null); . #21DC10 .",
            "url": "https://ninjabreadlord.github.io/chengfastpages/2023/03/10/lightboardtesting.html",
            "relUrl": "/2023/03/10/lightboardtesting.html",
            "date": " • Mar 10, 2023"
        }
        
    
  
    
        ,"post2": {
            "title": "Title",
            "content": "Key Concepts From Mr. Mortenson&#39;s Code . Methods and Control structures . Methods in overall coding are blocks of code that can be called upon and reused when needed within anywhere of the code. | When defining methods, one should be aware of the variable type that the method would return, parameters it takes in, of course the code, and then its implementation in calling. | . Data Types . Data types in Java are different values that could be stored in a variable in Java. As far as it goes, there are primitive data types and non primitive. | . Looking at the Diverse Arrays/Matrix . 2D Arrays are slightly tricky - the outer int[][] array is considered a non-primitive data type, meaning that values like null can be stored. However, within each array only primitive data types of the respective variable type can be stored. . | Within Mort&#39;s code he defines various methods within the Diverse array class, beginning with the arraySum method. It takes in an array, and finds the sum of the integers in the array. . public class DiverseArray { public static int arraySum(int[] arr) { int sum = 0; for (int num : arr) { sum += num; System.out.print(num + &quot; t&quot;); } return sum; } . | Next, he creates the sum of 2d arrays. Within the method he uses the other method defined previously to return a list of the sums of each row of the 2d array. . | . public static int[] rowSums(int[][] arr2D) { int rows = arr2D.length; int[] sumList = new int[rows]; for (int i = 0; i &lt; rows; i++) { sumList[i] = arraySum(arr2D[i]); System.out.println(&quot;= t&quot; + sumList[i]); // debug } return sumList; } . The final method simply checks if the rows are similar to each other | . Math.random . Math.random generates a random value from 0 to 1. When multiplied by a range it generates a value in that range. | In Number.java, it is used like so public Number() { int SIZE = 36; int MIN = 3; int RANGE = SIZE - MIN + 1; // constants for initialization this.number = (int)(Math.random()*RANGE) + MIN; // observe RANGE calculation and MIN offset this.index = Number.COUNT++; // observe use of Class variable COUNT and post increment } . | Here a range is set with variables so that it could be easily altered. Also be sure to cast the number as an integer so that a decimal value doesn&#39;t occur. | . DoNothingByValue.java . Overall, the DoNothingByValue demonstrates several methods of passing arguments. | The DoNothings method does nothing, it just shows how to pass in arguments . | Within the changeIt method, functions are done locally to the variables, however in the end, the arr outside the method is not altered, and thus is not changed. public static void changeIt(int [] arr, int val, String word) { arr = new int[5]; val = 0; word = word.substring(0, 5); . System.out.print(&quot;changeIt: &quot;); // added for (int k = 0; k &lt; arr.length; k++) { . arr[k] = 0; System.out.print(arr[k] + &quot; &quot;); // added . } System.out.println(word); // added . | . } . * The changeIt2 demonstrates the creation of non primitive data type, even though the data type has the same name, they can be referred differently with different alterations to the array while still keeping its original values in a seperate one. If you print &#39;arr&#39; it will be the original list. . public static void changeIt2(int [] nums, int value, String name) { nums = new int[5]; // new creates new memory address value = 0; // primitives are pass by value name = name.substring(0, 5); // all wrapper classes have automatic &quot;new&quot;, same as word = new String(word.substring(0, 5)); . // this loop changes nums locally System.out.print(&quot;changeIt2: &quot;); for (int k = 0; k &lt; nums.length; k++) { nums[k] = 0; System.out.print(nums[k] + &quot; &quot;); } System.out.println(name); . } . * In changeIt3 &#39;arr&#39; is actually modified, and the original is modified. However, since a new string object for word was created, the original &#39;word&#39; will not be modified because now it is a localized variable to the method. . public static String changeIt3(int [] arr, String word) { word = new String(word.substring(0, 5)); // wrapper class does a &quot;new&quot; on any assignment . System.out.print(&quot;changeIt3: &quot;); for (int k = 0; k &lt; arr.length; k++) { arr[k] = 0; // int array is initialized to 0&#39;s, not needed System.out.print(arr[k] + &quot; &quot;); } System.out.println(word); return word; . } . * For changeIt4, first the Triple type should be explained. Simply put, Triple can store three values within the data structure, each can be with a different data type. They are referred by left, middle, and right. * This simply shows how to modify an object passed by parameter. . public static Triple&lt;int[], Integer, String&gt; changeIt4(Triple&lt;int[], Integer, String&gt; T) { T.setOne(new int[5]); T.setTwo(0); // primitives are pass by value T.setThree(T.getThree().substring(0, 5)); // all wrapper classes have automatic &quot;new&quot;, same as word = new String(word.substring(0, 5)); . // this loop changes nums locally System.out.print(&quot;changeIt4: &quot;); for (int i : T.getOne()) { System.out.print(i + &quot; &quot;); } System.out.println(T.getThree()); return T; . } .",
            "url": "https://ninjabreadlord.github.io/chengfastpages/2023/03/10/keyconceptsinteachercode.html",
            "relUrl": "/2023/03/10/keyconceptsinteachercode.html",
            "date": " • Mar 10, 2023"
        }
        
    
  
    
        ,"post3": {
            "title": "2022-09-01 Java Objects Notes",
            "content": "Control Menu . Simple challenge to add a fourth case to the code provided . Documentation . Within the code the Class is defined by &#39;public Menu&#39;, aka the constructor of the object public Menu() { . | Usage of instance variables public final String DEFAULT = &quot; u001B[0m&quot;; // Default Terminal Color public final String[][] COLORS = { // 2D Array of ANSI Terminal Colors {&quot;Default&quot;,DEFAULT}, {&quot;Red&quot;, &quot; u001B[31m&quot;}, {&quot;Green&quot;, &quot; u001B[32m&quot;}, {&quot;Yellow&quot;, &quot; u001B[33m&quot;}, {&quot;Blue&quot;, &quot; u001B[34m&quot;}, {&quot;Purple&quot;, &quot; u001B[35m&quot;}, {&quot;Cyan&quot;, &quot; u001B[36m&quot;}, {&quot;White&quot;, &quot; u001B[37m&quot;}, }; . | Object calling method main Menu.main(null); . | Mutation instance int random = (int) (Math.random() * COLORS.length); // random logic . | . Menu Code . Simple code with the console menu and math classes | Mainly trigonomic functions added + random Chinese character maker | . import java.lang.Math; import java.util.*; public class Menu { public final String DEFAULT = &quot; u001B[0m&quot;; public final String[][] COLORS = { {&quot;Default&quot;,DEFAULT}, {&quot;Red&quot;, &quot; u001B[31m&quot;}, {&quot;Green&quot;, &quot; u001B[32m&quot;}, {&quot;Yellow&quot;, &quot; u001B[33m&quot;}, {&quot;Blue&quot;, &quot; u001B[34m&quot;}, {&quot;Purple&quot;, &quot; u001B[35m&quot;}, {&quot;Cyan&quot;, &quot; u001B[36m&quot;}, {&quot;White&quot;, &quot; u001B[37m&quot;}, }; public final int NAME = 0; public final int ANSI = 1; public Menu() { Scanner sc = new Scanner(System.in); this.print(); boolean quit = false; while (!quit) { try { int choice = sc.nextInt(); System.out.print(&quot;&quot; + choice + &quot;: &quot;); quit = this.action(choice); } catch (Exception e) { sc.nextLine(); System.out.println(e + &quot;: Not a choice&quot;); } } sc.close(); } private void print() { System.out.println(&quot;-&quot;); System.out.println(&quot;Java Math&quot;); System.out.println(&quot;-&quot;); System.out.println(&quot;1 - Degrees to Radians Converter&quot;); System.out.println(&quot;2 - Radians to Tangent&quot;); System.out.println(&quot;3 - Radians to Cosine&quot;); System.out.println(&quot;4 - Radians to Sine&quot;); System.out.println(&quot;5 - Random output of numbers and then converted to ASCII&quot;); System.out.println(&quot;0 - Quit&quot;); System.out.println(&quot;-&quot;); } private boolean action(int selection) { boolean quit = false; Scanner input = new Scanner(System.in); switch (selection) { case 0: System.out.print(&quot;Cya&quot;); quit = true; break; case 1: System.out.println(&quot;Enter an amount of degrees: &quot;); double degrees = input.nextDouble(); System.out.println(Math.toRadians(degrees)); case 2: System.out.println(&quot;Enter radians: &quot;); double radians = input.nextDouble(); System.out.print(&quot;Here is your sine value: &quot; + Math.sin(radians)); break; case 3: System.out.println(&quot;Enter radians: &quot;); radians = input.nextDouble(); System.out.print(&quot;Here is your tangent value: &quot; + Math.tan(radians)); break; case 4: System.out.println(&quot;Enter radians: &quot;); radians = input.nextDouble(); System.out.print(&quot;Here is your cosine value: &quot; + Math.cos(radians)); break; case 5: int random1 = 0; int i = 0; int l = 0; int[] asciiList = new int[10]; for(i = 0; i &lt; asciiList.length; i++){ random1 = (int)(Math.random()*100 +20000); asciiList[i] = random1; } System.out.println(&quot;Here is your list of random Chinese characters using Math.random: &quot;); for(int element: asciiList){ System.out.print((char)element + &quot;, &quot;); } break; default: System.out.print(&quot;Unexpected choice, try again.&quot;); } System.out.println(DEFAULT); return quit; } static public void main(String[] args) { new Menu(); } } Menu.main(null); . - Java Math - 1 - Degrees to Radians Converter 2 - Radians to Tangent 3 - Radians to Cosine 4 - Radians to Sine 5 - Random output of numbers and then converted to ASCII 0 - Quit - 5: Here is your list of random Chinese characters using Math.random: 乱, 乊, 丠, 乗, 乃, 丯, 乮, 乀, 乑, 乥, 0: Cya .",
            "url": "https://ninjabreadlord.github.io/chengfastpages/2023/03/10/javaobjects.html",
            "relUrl": "/2023/03/10/javaobjects.html",
            "date": " • Mar 10, 2023"
        }
        
    
  
    
        ,"post4": {
            "title": "Trimester 2 MC 2",
            "content": "MC Reflection + Corrections . Score 43/52 . A 43/52 is fine with me. However, I hope that my timing improves and thinking may speed up. Since starting, it took me around two hours to complete the entire thing. For most of the questions I had to use a pen and paper to consider each process, and then really think about it. Seeing how I got a 43/52 with the amount of time I put in, I think that I should really be doing better. I think my main problem is learning to understand large pieces of code(as in putting missing pieces or analyzing certain lines), and I hope that I may focus on that aspect in future tests. | . Corrections . Question 2 . . Misinterpreted the 2d array cell, mat[1][3] assigns 4, but there are also other cells. | . Question 7 . . Selected option (E) would be incorrect as it does not combine the two binary strings together, B actually represents the combined string properly. | . Question 12 . . Although the first line of “Alex Bob Carl” is proper, the second line doesn’t repeat itself. The second row would set all the names as “Alex” thus D is correct. | . Question 20 . . The character “!” would actually be printed 6 times, my selected answer of 4 would be correct if it was printed in all of the array. | . Question 21 . . Miscalculated the looping, it would actually be 5 instead of 4. | . Question 26 . . “On” is not a palindrome thus would not be equal to itself printed backwards. “noon” would be much more fitting as it is a palindrome | . Question 23 (Review) . . Here baboon would actually be inserted at the end of the array list as it begins with the letter ‘b’ and will be added at size-k which is at the end. From there, my order is correct in “bear” following “zebra” etc. I think I had a little trouble understanding the substring and remove commands, and thus need to look at it more in depth. | . Question 35 . . Just a case of reading the code improperly. Interpreted as printing at index k which would be incorrect. | . Question 42 . . 0 would be included in this array, I was close but just forgot one integer. | . Question 50 . . Read loop text wrong. C would be right | .",
            "url": "https://ninjabreadlord.github.io/chengfastpages/2023/01/31/52testcorrections.html",
            "relUrl": "/2023/01/31/52testcorrections.html",
            "date": " • Jan 31, 2023"
        }
        
    
  
    
        ,"post5": {
            "title": "Trimester 2 MC 1",
            "content": "MC Reflection + Corrections . Score 54/40 . Honestly a 54 out of 66 is fine with me. However, I hope that my timing improves and thinking may speed up. Since starting, it took me around two hours to complete the entire thing. For most of the questions I had to use a pen and paper to consider each process, and then really think about it. Seeing how I got a 54/66 with the amount of time I put in, I think that I should really be doing better. I think my main problem is learning to understand large pieces of code(as in putting missing pieces or analyzing certain lines), and I hope that I may focus on that aspect in future tests. | . Corrections . Question 1 . . In this case none of the options work at all, num and j are incorrect varaibles thus options two and three are incorrect. E would be the more fitting answer | . Question 2 . . There is no need to change the substring if statement. On the for loop it should not be an equal sign as it would not iterate properly so that the code would be incorrect. A would be the best answer for this case. | . Question 12 . . Or statements would not match the code. Having an or between both statements and ands within the statements would work better, thus making A would be better. | . Question 25 . . No return type was provided for updateItems, because of this the method should be void and does not compile. | . Question 34 (Review) . . The selected answer of A would be wrong as the sum would be twice as large as the correct answer. D would compile correctly. | . Question 36 . . The answer is C. Line 5 didn’t cause an error. | . Question 39 . . 2001 is not divisible by four, thus making my selected answer wrong. 1900 would work better. | . Question 41 . . I got messed up with the math here. B is the correct answer. | . Question 58 . . I literally misread the answer and put the wrong change in variable. It should be int pos = j; | .",
            "url": "https://ninjabreadlord.github.io/chengfastpages/2023/01/23/66testcorrections.html",
            "relUrl": "/2023/01/23/66testcorrections.html",
            "date": " • Jan 23, 2023"
        }
        
    
  
    
        ,"post6": {
            "title": "Unit 9 - Inheritance",
            "content": "// Hack 1 class Person { int heartbeats; String bloodtype; String eyecolor; public Car(int heartbeats, String bloodtype, String eyecolor) { this.heartbeats = heartbeats; this.bloodtype = bloodtype; this.eyecolor = eyecolor; } public void speak (){ System.out.print(&quot;Hi my name is gerald&quot;); } } class dog extends Person { String tail; public dog(int heartbeats, String bloodtype, String eyecolor, String tail){ super(heartbeats,bloodtype,eyecolor,tail); this.tail = tail; } //Hack 2 @Override public void speak(){ System.out.println(&quot;woof&quot;); } } class Test { public static void main(String[] args) { dog s = new dog(); } } . | public Car(int heartbeats, String bloodtype, String eyecolor) { invalid method declaration; return type required . Unit 8 - 2D Arrays .",
            "url": "https://ninjabreadlord.github.io/chengfastpages/2022/12/13/unit9hacks.html",
            "relUrl": "/2022/12/13/unit9hacks.html",
            "date": " • Dec 13, 2022"
        }
        
    
  
    
        ,"post7": {
            "title": "Unit 8 - 2D Arrays",
            "content": "Vocab . Array = a data structure used to implement a collection (list) of primitive or object reference data | Element = a single value in the array | Index = the position of the element in the array (starts from 0) | Array Length = the number of elements in the array Is public, so can be accessed in any class | Is also final, so can’t change it after array has been created | . | . 2D Arrays . A 2D array is an array of arrays, and can be a better way to store data | .",
            "url": "https://ninjabreadlord.github.io/chengfastpages/2022/12/06/unit8hacks.html",
            "relUrl": "/2022/12/06/unit8hacks.html",
            "date": " • Dec 6, 2022"
        }
        
    
  
    
        ,"post8": {
            "title": "Lesson Hacks Throughout",
            "content": "// Unit 1 - Primitives //2006 Full int i = 5; int p =27; for(int l = 23; l &lt;p; l++){ i*=(l-22); } System.out.print(i); //2a int i = 100; double d = 4.55; double d2 = 3.75; int j = (int) (d*100 + d2); System.out.print(j); //3a int val = 205; for(int i=0; i&lt;5; i++) { val/=2; } System.out.print(val); //4 int i = 3; for(int j = 5;j &gt; 0; j--){ i+=i; } System.out.print(i); // Pair coding public double purchasePrice(double x){ x *= 1.1; return x; } purchasePrice(6.50); public class Customer { private String name; private int id; public Customer(String name, int idNum){ this.name = name; this.id = idNum; }; public String getName(){ return name; }; public int getID(){ return id; }; public void compareCustomer(Customer x){ System.out.println(id - x.id); // return (id - x.id); }; } Customer c1 = new Customer(&quot;Smith&quot;, 1001); Customer c2 = new Customer(&quot;Anderson&quot;, 1002); Customer c3 = new Customer(&quot;Smith&quot;, 1003); c1.compareCustomer(c1); c1.compareCustomer(c2); c1.compareCustomer(c3); . 1204586960 -1 -2 . Vocab for Unit 1 . Constructor - A constructor initializes an object, a constructor has no return value because it is not actually used by the code, instead it simply initializes the object. public class Customer { . Intializing class Customer in this case with a constructor - no return value | . | Accessor methods - AKA “getters”, return the values in a defined class/reads the value, it is usually named get + Class Name public String getName(){ return name; }; . Getters in the Customer class, for this case it returns variable name | . | Mutator methods - AKA “setters”, sets the parameters to the attributes, it updates the values of a variable, it is usually named set + Class Name . public Customer(String name, int idNum){ this.name = name; this.id = idNum; }; . Setters to the customer class, setting name and id num updating the values | . | “This” refers to an object within a constructor, used in setters to set variables/parameters. . this.name = name; . Used in the creation of the Customer class | . | . // Unit 2 - OOP import java.util.*; //initializing the class Goblin public class Goblin { private String name; private int HP; private int DMG; private double hitChance; public String getName() { return name; } public int getHP() { return HP; } public int getDMG() { return DMG; } public double getHitChance() { return hitChance; } public boolean isAlive() { if (this.HP &gt; 0) { return true; } else { return false; } } public void setName(String newName) { this.name = newName; } public void setHP(int newHP) { this.HP = newHP; } public void takeDMG(int takenDamage) { this.HP -= takenDamage; } public void setDMG(int newDMG) { this.DMG = newDMG; } public void setHitChance(double newHitChance) { this.hitChance = newHitChance; } } public class Duel { public static void fight(Goblin goblin1, Goblin goblin2) { while (goblin1.isAlive() &amp;&amp; goblin2.isAlive()) { // goblin1 hit chance tester if (Math.random() &lt; goblin2.getHitChance()) { goblin2.takeDMG(goblin2.getDMG()); System.out.println(goblin1.getName() + &quot; takes &quot; + goblin2.getDMG() + &quot; damage&quot;); } else { System.out.println(goblin2.getName() + &quot; missed!&quot;); } // print hp of goblin1 System.out.println(goblin1.getName() + &quot; HP: &quot; + goblin1.getHP()); if (!goblin1.isAlive()) { System.out.println(goblin1.getName() + &quot; has perished&quot;); break; } // if statement for goblin2 hit chance if (Math.random() &lt; goblin1.getHitChance()) { goblin2.takeDMG(goblin1.getDMG()); System.out.println(goblin2.getName() + &quot; takes &quot; + goblin1.getDMG() + &quot; damage&quot;); } else { System.out.println(goblin1.getName() + &quot; missed!&quot;); } // print hp of goblin2 System.out.println(goblin2.getName() + &quot; HP: &quot; + goblin2.getHP()); if (!goblin2.isAlive()) { System.out.println(goblin2.getName() + &quot; has perished&quot;); break; } } } public static void main(String[] args) { Goblin goblin1 = new Goblin(); goblin1.setName(&quot;Joe Biden&quot;); goblin1.setHP(12); goblin1.setDMG(2); goblin1.setHitChance(0.2); Goblin goblin2 = new Goblin(); goblin2.setName(&quot;Donald Trump&quot;); goblin2.setHP(10); goblin2.setDMG(3); goblin2.setHitChance(0.75); fight(goblin1, goblin2); } } Duel.main(null); . Joe Biden takes 3 damage Joe Biden HP: 12 Joe Biden missed! Donald Trump HP: 7 Joe Biden takes 3 damage Joe Biden HP: 12 Donald Trump takes 2 damage Donald Trump HP: 2 Joe Biden takes 3 damage Joe Biden HP: 12 Joe Biden missed! Donald Trump HP: -1 Donald Trump has perished . Vocab for Unit 2 . Used things like Class creation, mutator methods, and accessor methods | Usage of Private modifier in variable creation - least accessible modifier that can be only used in the class in itself private String name; . name is private, no changes can be made to it outside the class | . | Compound Boolean Method - this includes using the &amp;&amp;, ||, and ! operators, . while (goblin1.isAlive() &amp;&amp; goblin2.isAlive()){ } . Boolean expression for while the goblins are both alive | . | Tester Method - Main/tester method is used to test a class with a specific input to validate its working efficiency. . public static void main(String[] args) { Goblin goblin1 = new Goblin(); goblin1.setName(&quot;Joe Biden&quot;); goblin1.setHP(12); goblin1.setDMG(2); goblin1.setHitChance(0.2); Goblin goblin2 = new Goblin(); goblin2.setName(&quot;Donald Trump&quot;); goblin2.setHP(10); goblin2.setDMG(3); goblin2.setHitChance(0.75); fight(goblin1, goblin2); } . This is a main method used that tests the class making two created goblins named &quot;Joe Biden&quot; and &quot;Donald Trump&quot; fight each other | . | . // Unit 3 - Boolean Expressions // 2009 3b public class BatteryCharger { public int getChargeStartTime(int chargeTime) { int starting = 0; for (int j = 1; j &lt; 24; j++) { if (this.getChargingCost(j, chargeTime) &lt; this.getChargingCost(starting, chargeTime)) starting = j; } return starting; } } BatteryCharger bat = new BatteryCharger(); bat.getChargeStartTime(6); //2017 1b import java.util.*; public class Digits { public ArrayList&lt;Integer&gt; digitList; public Digits(int num) { digitList = new ArrayList&lt;Integer&gt;(); if (num==0){ digitList.add(new Integer(0)); } while (num &gt; 0) { digitList.add(0, new Integer(num % 10)); num /= 10; } } public boolean isStrictlyIncreasing() { boolean increase = true; for (int i = 0; i &lt; digitList.size() - 1; i++) { if (digitList.get(i).intValue() &gt;= digitList.get(i + 1).intValue()) { increase = false; return increase; } } return increase; } } System.out.println(new Digits(1356).isStrictlyIncreasing()); System.out.println(new Digits(1536).isStrictlyIncreasing()); //2019 3b // 19 - 3b public class Delimiters { public String openDel; public String closeDel; public Delimiters(String open, String close) { } public ArrayList&lt;String&gt; getDelimitersList(String[] tokens){ //empty array } public boolean isBalanced(ArrayList&lt;String&gt; delimiters) { int opencount = 0; int closecount = 0; for (int i : delimiters) { if (delimiters.get(i) == openDel) { opencount++; } else if (delimiter.get(i) == closeDel) { closecount++; } if (closecount &gt; opencount) { return false; } } return true; } } . | // Unit 3 - Boolean Expressions | | // 2009 3b | public class BatteryCharger { | | public int getChargeStartTime(int chargeTime) { | int starting = 0; | for (int j = 1; j &lt; 24; j++) { | if (this.getChargingCost(j, chargeTime) &lt; this.getChargingCost(starting, chargeTime)) starting = j; | } | return starting; | } | } Unresolved dependencies: - method getChargingCost(int,int) . Vocab for Unit 3 . . Note: The code may not run as the getChargingCost() method is not defined by the AP exam, and here we are assuming that it works * Initialized the classes for each problem . Enhanced for loop -easier to use for loops, errors will usually happen less, as you don&#39;t have to manage steps by themselves, but for loops allows you to control everything about looping for (int i : delimiters) { . | . // Unit 4 - Iteration import java.util.*; class Main{ public static int GuessGame(){ int randomint = (int)(Math.random()*(100-1+1)+1); Scanner scan = new Scanner(System.in); System.out.println(&quot;Guess a number from 1 to 100&quot;); int guess = scan.nextInt(); int count = 0; while(guess != randomint){ if(guess &gt; randomint &amp;&amp; guess &lt;= 100){ System.out.println(&quot;Too high&quot;); System.out.println(&quot;Guess a number in range 1 to 100&quot;); count++; guess = scan.nextInt(); }else if(guess &lt; randomint &amp;&amp; guess &gt;= 1){ System.out.println(&quot;Too Low&quot;); System.out.println(&quot;Guess a number in range 1 to 100&quot;); count++; guess = scan.nextInt(); }else{ System.out.println(&quot;Number outside predefined range&quot;); System.out.println(&quot;Guess a number in range 1 to 100&quot;); guess = scan.nextInt(); } } System.out.println(&quot;nice&quot;); return(count); } public static void main(String[] args){ System.out.println(&quot;You guessed: &quot; + GuessGame() + &quot; times&quot;); } } Main.main(null); . Guess a number from 1 to 100 Too Low Guess a number in range 1 to 100 Too Low Guess a number in range 1 to 100 Too high Guess a number in range 1 to 100 Too Low Guess a number in range 1 to 100 Too Low Guess a number in range 1 to 100 nice You guessed: 5 times . Vocab for Unit 4 . Usage of static method, intialization of class, boolean statements, and the tester method. | Usage of a Math.random imported class | Usage of casting into an int from a double int randomint = (int)(Math.random()*(100-1+1)+1); . math random generates a double | . | . // Unit 5 - Classes //initialize the class public class WordMatch { String secret; //setters public WordMatch(String secret) { this.secret = secret; } public void scoreGuess(String guess) { //counter variable int counter = 0; for (int i = 0; i &lt; this.secret.length(); i++){ for (int j = i + 1; j &lt; this.secret.length() + 1; j++) { if (guess.equals(this.secret.substring(i,j))) { counter++; } } } int points = counter * guess.length() * guess.length(); System.out.println(&quot;&quot; + guess + &quot; = &quot; + points); } } WordMatch game = new WordMatch(&quot;mississippi&quot;); game.scoreGuess(&quot;i&quot;); game.scoreGuess(&quot;iss&quot;); game.scoreGuess(&quot;issipp&quot;); game.scoreGuess(&quot;mississippi&quot;); //Part 2 public class ClubMembers { private ArrayList&lt;MemberInfo&gt; memberList; public void addMembers(String[] names, int gradYear) { for(String name : names) { memberList.add(new MemberInfo(name, gradYear, true)); } } } . i = 4 iss = 18 issipp = 36 mississippi = 121 . Vocab for Unit 5 . Initialized the class | Nested For Loop - meant to loop through the single array and compare the word it&#39;s on and the word in front(in this case) for (int i = 0; i &lt; this.secret.length(); i++){ for (int j = i + 1; j &lt; this.secret.length() + 1; j++) { . | Comparing strings - used .equals() which compares the values of two strings if (guess.equals(this.secret.substring(i,j))) { . | . // Unit 6 - Arrays // A. Swap the first and last element of an array import java.util.*; public class A{ public static void main(String[] args){ int[] array = {1, 2, 3,4}; System.out.println(Arrays.toString(array)); int temp = array[0]; array[0] = array[array.length-1]; array[array.length-1] = temp; System.out.println(&quot;Swapped array: &quot;+ Arrays.toString(array)); } } // B. Replace all even elements with 0. public class B{ public static void main(String[] args){ int[] array = {1,2,3,4,5,6}; System.out.println(Arrays.toString(array)); for(int i = 0; i &lt; array.length; i++){ if(array[i] % 2 == 0){ array[i] = 0; } } System.out.println(&quot;Zero array: &quot; + Arrays.toString(array)); } } A.main(null); B.main(null); . [1, 2, 3, 4] Swapped array: [4, 2, 3, 1] [1, 2, 3, 4, 5, 6] Zero array: [1, 0, 3, 0, 5, 0] . Vocabs for Unit 6 . Initialized class, static variables | Iterated through a list for(int i = 0; i &lt; array.length; i++){ . | .",
            "url": "https://ninjabreadlord.github.io/chengfastpages/2022/12/01/unit1to5lessonhacks.html",
            "relUrl": "/2022/12/01/unit1to5lessonhacks.html",
            "date": " • Dec 1, 2022"
        }
        
    
  
    
        ,"post9": {
            "title": "Further Vocab Unused in Lessons",
            "content": "Vocab . abstract class Person { public void organ() { System.out.println(&quot;3 Organs&quot;); } } class Joe extends Person { public void organ() { System.out.println(&quot;2 Organs&quot;); } } Joe joe = new Joe(); joe.organ(); . 2 Organs . Abstract Class - This class’s objects and methods can be referenced, however the class itself is not initialized. | Inheritance/extends - takes aspects of an existing class and replicates it within another class using the extends method, simplifying code by a lot. | . public class Polymorphism { public void output(int x) { System.out.println(x); } public void output(double x) { System.out.println(x); } public void output(String x) { System.out.println(x); } } Polymorphism polymorphism = new Polymorphism(); polymorphism.output(100); polymorphism.output(100.2); polymorphism.output(&quot;Hello&quot;); . 100 100.2 Hello . Polymorphism - Multiple methods with the same name but different parameters, uses it at different times | Overloading - When you use the same method name in a class each with different parameters. | Overriding - When a subclass has the same name and parameters as the parent class | Protected classes are used when you want to access the class within the package, subclasses. Can use extends to it to access. | . class Person { Person() { System.out.println(&quot;Person class Constructor&quot;); } } // subclass Student extending the Person class class Student extends Person { Student() { super(); System.out.println(&quot;Student class Constructor&quot;); } } // Driver Program class Test { public static void main(String[] args) { Student s = new Student(); } } . Subclass Constructor - A subclass constructor forms after extending a previous class, and using the super(); method will take a method and replicate it in the new class. | . // Wrapper classes int x = 5; Integer xObj = x; String thing = xObj.toString(); System.out.println(thing); . 5 . Wrapper Classes - Wrapper classes allow converting primitives into objects and vice versa, which allows java to be object oriented, as primitives aren’t an object by default. Changes variables into object types. | . Truth tables - deines boolean function by choosing value for each possible value of arguments | Big O Notation - Time complexity and figuring out the most efficient way of runining code | .",
            "url": "https://ninjabreadlord.github.io/chengfastpages/2022/12/01/Vocab.html",
            "relUrl": "/2022/12/01/Vocab.html",
            "date": " • Dec 1, 2022"
        }
        
    
  
    
        ,"post10": {
            "title": "Vocabular",
            "content": "AP 2014 MC Reflection + Corrections .",
            "url": "https://ninjabreadlord.github.io/chengfastpages/2022/11/29/vocabulary.html",
            "relUrl": "/2022/11/29/vocabulary.html",
            "date": " • Nov 29, 2022"
        }
        
    
  
    
        ,"post11": {
            "title": "2019 FRQ 1",
            "content": "public class APCalendar { /** Returns true if year is a leap year and false otherwise. * isLeapYear(2019) returns False * isLeapYear(2016) returns True */ private static boolean isLeapYear(int year) { if((year - 2016) % 4 == 0){ return true; }else{ return false; } } /** Returns the value representing the day of the week * 0 denotes Sunday, * 1 denotes Monday, ..., * 6 denotes Saturday. * firstDayOfYear(2019) returns 2 for Tuesday. */ private static int firstDayOfYear(int year) { // implementation not shown return 0; } //easdasd /** Returns n, where month, day, and year specify the nth day of the year. * This method accounts for whether year is a leap year. * dayOfYear(1, 1, 2019) return 1 * dayOfYear(3, 1, 2017) returns 60, since 2017 is not a leap year * dayOfYear(3, 1, 2016) returns 61, since 2016 is a leap year. */ private static int dayOfYear(int month, int day, int year) { // implementation not shown return 1; } /** Returns the number of leap years between year1 and year2, inclusive. * Precondition: 0 &lt;= year1 &lt;= year2 */ public static int numberOfLeapYears(int year1, int year2) { // to be implemented in part (a) return 0; } /** Returns the value representing the day of the week for the given date * Precondition: The date represented by month, day, year is a valid date. */ public static int dayOfWeek(int month, int day, int year) { // to be implemented in part (b) return 0; } /** Tester method */ public static void main(String[] args) { // Private access modifiers System.out.println(&quot;isLeapYear: &quot; + APCalendar.isLeapYear(2022)); System.out.println(&quot;firstDayOfYear: &quot; + APCalendar.firstDayOfYear(2022)); System.out.println(&quot;dayOfYear: &quot; + APCalendar.dayOfYear(1, 1, 2022)); // Public access modifiers System.out.println(&quot;numberOfLeapYears: &quot; + APCalendar.numberOfLeapYears(2000, 2022)); System.out.println(&quot;dayOfWeek: &quot; + APCalendar.dayOfWeek(1, 1, 2022)); } } .",
            "url": "https://ninjabreadlord.github.io/chengfastpages/2022/11/14/methodsfrq1.html",
            "relUrl": "/2022/11/14/methodsfrq1.html",
            "date": " • Nov 14, 2022"
        }
        
    
  
    
        ,"post12": {
            "title": "Lesson Hacks Throughout",
            "content": "// Classes public class WordMatch { String secret; public WordMatch(String secret) { this.secret = secret; } public void scoreGuess(String guess) { int counter = 0; for (int i = 0; i &lt; this.secret.length(); i++){ for (int j = i + 1; j &lt; this.secret.length() + 1; j++) { if (guess.equals(this.secret.substring(i,j))) { counter++; } } } int points = counter * guess.length() * guess.length(); System.out.println(&quot;&quot; + guess + &quot; = &quot; + points); } } . // Boolean Expressions // 2009 3b public class BatteryCharger { public int getChargeStartTime(int chargeTime) { int starting = 0; //for loop to find the least for (int j = 1; j &lt; 24; j++) { if (this.getChargingCost(j, chargeTime) &lt; this.getChargingCost(starting, chargeTime)) starting = j; } return starting; } } // Make new battery BatteryCharger bat = new BatteryCharger(); bat.getChargeStartTime(6); //2017 1b import java.util.*; public class Digits { public ArrayList&lt;Integer&gt; digitList; public Digits(int num) { digitList = new ArrayList&lt;Integer&gt;(); if (num==0){ digitList.add(new Integer(0)); } while (num &gt; 0) { digitList.add(0, new Integer(num % 10)); num /= 10; } } public boolean isStrictlyIncreasing() { boolean increase = true; for (int i = 0; i &lt; digitList.size() - 1; i++) { if (digitList.get(i).intValue() &gt;= digitList.get(i + 1).intValue()) { increase = false; return increase; } } return increase; } } System.out.println(new Digits(1356).isStrictlyIncreasing()); System.out.println(new Digits(1536).isStrictlyIncreasing()); //2019 3b // 19 - 3b public class Delimiters { public String openDel; public String closeDel; public Delimiters(String open, String close) { } public ArrayList&lt;String&gt; getDelimitersList(String[] tokens){ //empty array } public boolean isBalanced(ArrayList&lt;String&gt; delimiters) { int opencount = 0; int closecount = 0; for (int i = 0; i &lt; delimiters.size(); i++) { if (delimiters.get(i) == openDel) { opencount++; } else if (delimiter.get(i) == closeDel) { closecount++; } if (closecount &gt; opencount) { return false; } } return true; } } . // Iteration Homework import java.util.*; class Main{ public static int GuessGame(){ int randomint = (int)(Math.random()*(100-1+1)+1); Scanner scan = new Scanner(System.in); System.out.println(&quot;Guess a number from 1 to 100&quot;); int guess = scan.nextInt(); int count = 0; //While loop until the player gets it while(guess != randomint){ if(guess &gt; randomint &amp;&amp; guess &lt;= 100){ System.out.println(&quot;Too high&quot;); System.out.println(&quot;Guess a number in range 1 to 100&quot;); count++; guess = scan.nextInt(); }else if(guess &lt; randomint &amp;&amp; guess &gt;= 1){ System.out.println(&quot;Too Low&quot;); System.out.println(&quot;Guess a number in range 1 to 100&quot;); count++; guess = scan.nextInt(); //this is just in case the player guesses outside }else{ System.out.println(&quot;Number outside predefined range&quot;); System.out.println(&quot;Guess a number in range 1 to 100&quot;); guess = scan.nextInt(); } } System.out.println(&quot;nice&quot;); return(count); } public static void main(String[] args){ System.out.println(&quot;You guessed: &quot; + GuessGame() + &quot; times&quot;); } } Main.main(null); . // Primitives //2006 Full int i = 5; int p =27; for(int l = 23; l &lt;p; l++){ i*=(l-22); } System.out.print(i); //2a int i = 100; double d = 4.55; double d2 = 3.75; int j = (int) (d*100 + d2); System.out.print(j); //3a int val = 205; for(int i=0; i&lt;5; i++) { val/=2; } System.out.print(val); //4 int i = 3; for(int j = 5;j &gt; 0; j--){ i+=i; } System.out.print(i); // Pair coding public double purchasePrice(double x){ x *= 1.1; return x; } purchasePrice(6.50); public class Customer { private String name; private int id; public Customer(String name, int idNum){ this.name = name; this.id = idNum; }; public String getName(){ return name; }; public int getID(){ return id; }; public void compareCustomer(Customer x){ System.out.println(id - x.id); }; } Customer c1 = new Customer(&quot;Smith&quot;, 1001); Customer c2 = new Customer(&quot;Anderson&quot;, 1002); Customer c3 = new Customer(&quot;Smith&quot;, 1003); c1.compareCustomer(c1); c1.compareCustomer(c2); c1.compareCustomer(c3); . // Using Objects/ Goblin Fight import java.util.*; public class Goblin { private String name; private int HP; private int DMG; private double hitChance; public String getName() { return name; } public int getHP() { return HP; } public int getDMG() { return DMG; } public double getHitChance() { return hitChance; } public boolean isAlive() { if (this.HP &gt; 0) { return true; } else { return false; } } public void setName(String newName) { this.name = newName; } public void setHP(int newHP) { this.HP = newHP; } public void takeDMG(int takenDamage) { this.HP -= takenDamage; } public void setDMG(int newDMG) { this.DMG = newDMG; } public void setHitChance(double newHitChance) { this.hitChance = newHitChance; } } public class Duel { public static void fight(Goblin goblin1, Goblin goblin2) { while (goblin1.isAlive() &amp;&amp; goblin2.isAlive()) { // goblin1 hit chance tester if (Math.random() &lt; goblin2.getHitChance()) { goblin2.takeDMG(goblin2.getDMG()); System.out.println(goblin1.getName() + &quot; takes &quot; + goblin2.getDMG() + &quot; damage&quot;); } else { System.out.println(goblin2.getName() + &quot; missed!&quot;); } // print hp of goblin1 System.out.println(goblin1.getName() + &quot; HP: &quot; + goblin1.getHP()); if (!goblin1.isAlive()) { System.out.println(goblin1.getName() + &quot; has perished&quot;); break; } // if statement for goblin2 hit chance if (Math.random() &lt; goblin1.getHitChance()) { goblin2.takeDMG(goblin1.getDMG()); System.out.println(goblin2.getName() + &quot; takes &quot; + goblin1.getDMG() + &quot; damage&quot;); } else { System.out.println(goblin1.getName() + &quot; missed!&quot;); } // print hp of goblin2 System.out.println(goblin2.getName() + &quot; HP: &quot; + goblin2.getHP()); if (!goblin2.isAlive()) { System.out.println(goblin2.getName() + &quot; has perished&quot;); break; } } } public static void main(String[] args) { Goblin goblin1 = new Goblin(); goblin1.setName(&quot;Joe Biden&quot;); goblin1.setHP(12); goblin1.setDMG(2); goblin1.setHitChance(0.5); Goblin goblin2 = new Goblin(); goblin2.setName(&quot;Donald Trump&quot;); goblin2.setHP(4); goblin2.setDMG(1); goblin2.setHitChance(0.75); fight(goblin1, goblin2); } } Duel.main(null); .",
            "url": "https://ninjabreadlord.github.io/chengfastpages/2022/11/08/lessonhacks.html",
            "relUrl": "/2022/11/08/lessonhacks.html",
            "date": " • Nov 8, 2022"
        }
        
    
  
    
        ,"post13": {
            "title": "Trimester 1 Mc",
            "content": "AP 2014 MC Reflection + Corrections . Score 32/40 . Honestly a 32 out of 40 is fine with me, it barely makes the cutoff for a an 80%. However, I hope that my timing improves and thinking may speed up. Since starting, it took me around two hours to complete the entire thing. For most of the questions I had to use a pen and paper to consider each process, and then really think about it. Seeing how I got a 32/40 with the amount of time I put in, I think that I should really be doing better. I think my main problem is learning to understand large pieces of code(as in putting missing pieces or analyzing certain lines), and I hope that I may focus on that aspect in future tests. | . Corrections . Question 4 . . I incorrectly chose the floated value instead of the value that fits the integer primitive. The answer 2.333 should be rounded down to 2. | . Question 10 . . Choice 1(A) would actually work as it returns value 0 from the function seqSearchRecHelper. Choice 2(B) would be the correct answer as if the data does contain the value 5, the function would instead return -1 creating an out of bounds error. | . Question 14 . . Because of the usage of an enhanced for each loop, there is no need for the method .get does not need to be used making answer choice D wrong. v.getMileage() would be better as it only uses the variable “v” and nothing else, which is the proper way in using an enhanced loop. | . Question 15 . . My selected answer(D) is incorrect because choice two does not work. Choice two provides data[k + 1] which would create an out of bounds error on the last part of the array. Choice 1 is correct, and therefore choice A would be correct. | . Question 17 . . Choice D is incorrect as the last value of the array will not be affected by the for loop as the for loop iterates through the length of the loop minus 1. Choice C would be better as it displays the correct final value of 7. | . Question 19 (Review Demorgan’s Law) . . !(!(a != b)) would just be (a != b), not (a==b) which was my selected answer. B would be a better choice because it contains the proper change through DeMorgan’s Law. | . Question 23 (Review) . . Here baboon would actually be inserted at the end of the array list as it begins with the letter ‘b’ and will be added at size-k which is at the end. From there, my order is correct in “bear” following “zebra” etc. I think I had a little trouble understanding the substring and remove commands, and thus need to look at it more in depth. | . Question 33 . . Here is just a case of remembering the conditionals. This is an infinite loop as the condition k &lt; 4 will never be satisfied. || means or, meaing that either one may work, which I forgot during the exam. | .",
            "url": "https://ninjabreadlord.github.io/chengfastpages/2022/11/06/trimester1mc.html",
            "relUrl": "/2022/11/06/trimester1mc.html",
            "date": " • Nov 6, 2022"
        }
        
    
  
    
        ,"post14": {
            "title": "Title",
            "content": "",
            "url": "https://ninjabreadlord.github.io/chengfastpages/2022/10/19/iterationhomework.html",
            "relUrl": "/2022/10/19/iterationhomework.html",
            "date": " • Oct 19, 2022"
        }
        
    
  
    
        ,"post15": {
            "title": "Images Printing",
            "content": "Fixing the ASCII printing, greyscale, redscale, bluescale, and greenscale . import java.awt.Color; import java.awt.image.BufferedImage; import java.awt.Image; import java.awt.Graphics2D; import java.io.File; import java.io.FileWriter; import java.io.IOException; import java.io.PrintWriter; import java.nio.file.Files; import java.nio.file.Path; import java.nio.file.Paths; import javax.imageio.stream.ImageOutputStream; import javax.imageio.stream.ImageInputStream; import javax.imageio.metadata.IIOMetadata; import javax.imageio.IIOImage; import javax.imageio.ImageIO; import javax.imageio.ImageWriteParam; import javax.imageio.ImageWriter; import javax.imageio.ImageReader; import javax.imageio.ImageTypeSpecifier; public class Pics { private final String inDir = &quot;images/&quot;; // location of images private final String outDir = &quot;images/tmp/&quot;; // location of created files private String inFile; private String resizedFile; private String greyScaleFile; private String redScaleFile; private String blueScaleFile; private String greenScaleFile; private String asciiFile; private String ext; // extension of file private long bytes; private int width; private int height; // Constructor obtains attributes of picture public Pics(String name, String ext) { this.ext = ext; this.inFile = this.inDir + name + &quot;.&quot; + ext; this.resizedFile = this.outDir + name + &quot;.&quot; + ext; this.greyScaleFile = this.outDir + name + &quot;_grey.&quot; + ext; this.redScaleFile = this.outDir + name + &quot;_red.&quot; + ext; this.greenScaleFile = this.outDir + name + &quot;_green.&quot; + ext; this.blueScaleFile = this.outDir + name + &quot;_blue.&quot; + ext; this.asciiFile = this.outDir + name + &quot;.txt&quot;; this.setStats(); } // An image contains metadata, namely size, width, and height public void setStats() { BufferedImage img; try { Path path = Paths.get(this.inFile); this.bytes = Files.size(path); img = ImageIO.read(new File(this.inFile)); this.width = img.getWidth(); this.height = img.getHeight(); } catch (IOException e) { } } // Console print of data public void printStats(String msg) { System.out.println(msg + &quot;: &quot; + this.bytes + &quot; &quot; + this.width + &quot;x&quot; + this.height + &quot; &quot; + this.inFile); } // Convert scaled image into buffered image public static BufferedImage convertToBufferedImage(Image img) { // Create a buffered image with transparency BufferedImage bi = new BufferedImage( img.getWidth(null), img.getHeight(null), BufferedImage.TYPE_INT_ARGB); // magic? Graphics2D graphics2D = bi.createGraphics(); graphics2D.drawImage(img, 0, 0, null); graphics2D.dispose(); return bi; } // Scale or reduce to &quot;scale&quot; percentage provided public void resize(int scale) { BufferedImage img = null; Image resizedImg = null; int width = (int) (this.width * (scale/100.0) + 0.5); int height = (int) (this.height * (scale/100.0) + 0.5); try { // read an image to BufferedImage for processing img = ImageIO.read(new File(this.inFile)); // set buffer of image data // create a new BufferedImage for drawing resizedImg = img.getScaledInstance(width, height, Image.SCALE_SMOOTH); } catch (IOException e) { return; } try { ImageIO.write(convertToBufferedImage(resizedImg), this.ext, new File(resizedFile)); } catch (IOException e) { return; } this.inFile = this.resizedFile; // use scaled file vs original file in Class this.setStats(); } public void greyScale() { BufferedImage img = null; BufferedImage greyScaleImg = null; try{ img = ImageIO.read(new File(this.inFile)); greyScaleImg = img; for (int i = 0; i &lt; img.getHeight(); i++) { for (int j = 0; j &lt; img.getWidth(); j++) { Color c = new Color(img.getRGB(j, i)); int red = (int)(c.getRed() * 0.299); int green = (int)(c.getGreen() * 0.587); int blue = (int)(c.getBlue() *0.114); int sum = red+green+blue; Color newColor = new Color(sum,sum,sum); greyScaleImg.setRGB(j,i,newColor.getRGB()); } } }catch(Exception e) { return; } try{ ImageIO.write(convertToBufferedImage(greyScaleImg), this.ext, new File(greyScaleFile)); }catch(IOException e){ return; } this.inFile = this.greyScaleFile; this.setStats(); } public void redScale(){ BufferedImage img = null; BufferedImage redScaleImg = null; try{ img = ImageIO.read(new File(this.inFile)); redScaleImg = img; for (int i = 0; i &lt; img.getHeight(); i++) { for (int j = 0; j &lt; img.getWidth(); j++) { Color c = new Color(img.getRGB(j, i)); Color newColor = new Color((int)(c.getRed()),0,0); redScaleImg.setRGB(j,i,newColor.getRGB()); } } }catch(Exception e){ return; } try{ ImageIO.write(convertToBufferedImage(redScaleImg), this.ext, new File(redScaleFile)); }catch(IOException e){ return; } this.inFile = this.redScaleFile; this.setStats(); } public void greenScale(){ BufferedImage img = null; BufferedImage greenScaleImg = null; try{ img = ImageIO.read(new File(this.inFile)); greenScaleImg = img; for (int i = 0; i &lt; img.getHeight(); i++) { for (int j = 0; j &lt; img.getWidth(); j++) { Color c = new Color(img.getRGB(j, i)); Color newColor = new Color(0,(int)(c.getGreen()),0); greenScaleImg.setRGB(j,i,newColor.getRGB()); } } }catch(Exception e){ return; } try{ ImageIO.write(convertToBufferedImage(greenScaleImg), this.ext, new File(greenScaleFile)); }catch(IOException e){ return; } this.inFile = this.greenScaleFile; this.setStats(); } public void blueScale(){ BufferedImage img = null; BufferedImage blueScaleImg = null; try{ img = ImageIO.read(new File(this.inFile)); blueScaleImg = img; for (int i = 0; i &lt; img.getHeight(); i++) { for (int j = 0; j &lt; img.getWidth(); j++) { Color c = new Color(img.getRGB(j, i)); Color newColor = new Color(0,0,(int)(c.getBlue())); blueScaleImg.setRGB(j,i,newColor.getRGB()); } } }catch(Exception e){ return; } try{ ImageIO.write(convertToBufferedImage(blueScaleImg), this.ext, new File(blueScaleFile)); }catch(IOException e){ return; } this.inFile = this.blueScaleFile; this.setStats(); } public void convertToAscii() { BufferedImage img = null; PrintWriter asciiPrt = null; FileWriter asciiWrt = null; try { File file = new File(this.asciiFile); Files.deleteIfExists(file.toPath()); } catch (IOException e) { System.out.println(&quot;Delete File error: &quot; + e); } try { asciiPrt = new PrintWriter(asciiWrt = new FileWriter(this.asciiFile, true)); } catch (IOException e) { System.out.println(&quot;ASCII out file create error: &quot; + e); } try { img = ImageIO.read(new File(this.inFile)); } catch (IOException e) { } for (int i = 0; i &lt; img.getHeight(); i++) { for (int j = 0; j &lt; img.getWidth(); j++) { Color col = new Color(img.getRGB(j, i)); double pixVal = (((col.getRed() * 0.30) + (col.getBlue() * 0.59) + (col .getGreen() * 0.11))); try { asciiPrt.print(asciiChar(pixVal)); asciiPrt.print(asciiChar(pixVal)); asciiPrt.flush(); asciiWrt.flush(); } catch (Exception ex) { } } try { asciiPrt.println(&quot;&quot;); asciiPrt.flush(); asciiWrt.flush(); } catch (Exception ex) { } } } public String asciiChar(double g) { String str = &quot; &quot;; if (g &gt;= 240) { str = &quot; &quot;; } else if (g &gt;= 210) { str = &quot;.&quot;; } else if (g &gt;= 190) { str = &quot;*&quot;; } else if (g &gt;= 170) { str = &quot;+&quot;; } else if (g &gt;= 120) { str = &quot;^&quot;; } else if (g &gt;= 110) { str = &quot;&amp;&quot;; } else if (g &gt;= 80) { str = &quot;8&quot;; } else if (g &gt;= 60) { str = &quot;#&quot;; } else { str = &quot;@&quot;; } return str; } // tester/driver public static void main(String[] args) throws IOException { Pics monaLisa = new Pics(&quot;MonaLisa&quot;, &quot;png&quot;); monaLisa.greyScale(); // monaLisa.redScale(); monaLisa.blueScale(); // monaLisa.blueScale(); // monaLisa.printStats(&quot;Original&quot;); // monaLisa.resize(33); // monaLisa.printStats(&quot;Scaled&quot;); // monaLisa.convertToAscii(); Pics pumpkin = new Pics(&quot;pumpkin&quot;, &quot;png&quot;); pumpkin.greyScale(); // pumpkin.redScale(); // pumpkin.greenScale(); pumpkin.blueScale(); } } Pics.main(null); . . .",
            "url": "https://ninjabreadlord.github.io/chengfastpages/2022/10/02/images.html",
            "relUrl": "/2022/10/02/images.html",
            "date": " • Oct 2, 2022"
        }
        
    
  
    
        ,"post16": {
            "title": "Fibonacci Work and Usage of Extends",
            "content": "Original Code . // Original Code import java.util.ArrayList; import java.util.HashMap; import java.util.stream.Stream; /* Objective will require changing to abstract class with one or more abstract methods below */ public class Fibo { String name; // name or title of method int size; // nth sequence int hashID; // counter for hashIDs in hash map ArrayList&lt;Long&gt; list; // captures current Fibonacci sequence HashMap&lt;Integer, Object&gt; hash; // captures each sequence leading to final result /* Zero parameter constructor uses Telescoping technique to allow setting of the required value nth @param: none */ public Fibo() { this(10); // telescope to avoid code duplication, using default as 20 } /* Construct the nth fibonacci number @param: nth number, the value is constrained to 92 because of overflow in a long */ public Fibo(int nth) { this.size = nth; this.list = new ArrayList&lt;&gt;(); this.hashID = 0; this.hash = new HashMap&lt;&gt;(); //initialize fibonacci and time mvc this.init(); } /* This Method should be &quot;abstract&quot; Leave method as protected, as it is only authorized to extender of the class Make new class that extends and defines init() Inside references within this class would change from this to super Repeat process using for, while, recursion */ protected void init() { this.name = &quot;Stream&quot;; Stream.iterate(new long[]{0, 1}, f -&gt; new long[]{f[1], f[0] + f[1]}) .limit(this.size) .forEach(f -&gt; this.setData(f[0]) ); } /* Number is added to fibonacci sequence, current state of &quot;list&quot; is added to hash for hashID &quot;num&quot; */ public void setData(long num) { list.add(num); hash.put(this.hashID++, list.clone()); } /* Custom Getter to return last element in fibonacci sequence */ public long getNth() { return list.get(this.size - 1); } /* Custom Getter to return last fibonacci sequence in HashMap */ public Object getNthSeq(int i) { return hash.get(i); } /* Console/Terminal supported print method */ public void print() { System.out.println(&quot;Init method = &quot; + this.name); System.out.println(&quot;fibonacci Number &quot; + this.size + &quot; = &quot; + this.getNth()); System.out.println(&quot;fibonacci List = &quot; + this.list); System.out.println(&quot;fibonacci Hashmap = &quot; + this.hash); for (int i=0 ; i&lt;this.size; i++ ) { System.out.println(&quot;fibonacci Sequence &quot; + (i+1) + &quot; = &quot; + this.getNthSeq(i)); } } /* Tester class method. If this becomes abstract you will not be able to test it directly ... Change this method to call &quot;main&quot; class of each of the extended classes */ static public void main(String[] args) { Fibo fib = new Fibo(); fib.print(); } } Fibo.main(null); . Init method = Stream fibonacci Number 10 = 34 fibonacci List = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] fibonacci Hashmap = {0=[0], 1=[0, 1], 2=[0, 1, 1], 3=[0, 1, 1, 2], 4=[0, 1, 1, 2, 3], 5=[0, 1, 1, 2, 3, 5], 6=[0, 1, 1, 2, 3, 5, 8], 7=[0, 1, 1, 2, 3, 5, 8, 13], 8=[0, 1, 1, 2, 3, 5, 8, 13, 21], 9=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34]} fibonacci Sequence 1 = [0] fibonacci Sequence 2 = [0, 1] fibonacci Sequence 3 = [0, 1, 1] fibonacci Sequence 4 = [0, 1, 1, 2] fibonacci Sequence 5 = [0, 1, 1, 2, 3] fibonacci Sequence 6 = [0, 1, 1, 2, 3, 5] fibonacci Sequence 7 = [0, 1, 1, 2, 3, 5, 8] fibonacci Sequence 8 = [0, 1, 1, 2, 3, 5, 8, 13] fibonacci Sequence 9 = [0, 1, 1, 2, 3, 5, 8, 13, 21] fibonacci Sequence 10 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] . //While Loop public class fibowWhile extends Fibo { public fibowWhile() { this(10); } public fibowWhile(int nth) { this.size = nth; this.list = new ArrayList&lt;&gt;(); this.hashID = 0; this.hash = new HashMap&lt;&gt;(); this.init(); } static public void main(String[] args) { fibowWhile wFib = new fibowWhile(); wFib.print(); } protected void init() { this.name = &quot;While&quot;; int i = 0; long[] f = new long[] {0,1}; while (i &lt; this.size) { this.setData(f[0]); f = new long[] {f[1], f[0] + f[1]}; i=i+1; } } } FiboWhile.main(null) . Init method = While Loop fibonacci Number 10 = 34 fibonacci List = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] fibonacci Hashmap = {0=[0], 1=[0, 1], 2=[0, 1, 1], 3=[0, 1, 1, 2], 4=[0, 1, 1, 2, 3], 5=[0, 1, 1, 2, 3, 5], 6=[0, 1, 1, 2, 3, 5, 8], 7=[0, 1, 1, 2, 3, 5, 8, 13], 8=[0, 1, 1, 2, 3, 5, 8, 13, 21], 9=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34]} fibonacci Sequence 1 = [0] fibonacci Sequence 2 = [0, 1] fibonacci Sequence 3 = [0, 1, 1] fibonacci Sequence 4 = [0, 1, 1, 2] fibonacci Sequence 5 = [0, 1, 1, 2, 3] fibonacci Sequence 6 = [0, 1, 1, 2, 3, 5] fibonacci Sequence 7 = [0, 1, 1, 2, 3, 5, 8] fibonacci Sequence 8 = [0, 1, 1, 2, 3, 5, 8, 13] fibonacci Sequence 9 = [0, 1, 1, 2, 3, 5, 8, 13, 21] fibonacci Sequence 10 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] . //For Loop public class fiboFor extends Fibo { public fiboFor() { this(10); } public fiboFor(int nth) { this.size = nth; this.list = new ArrayList&lt;&gt;(); this.hashID = 0; this.hash = new HashMap&lt;&gt;(); this.init(); } static public void main(String[] args) { fiboFor fFib = new fiboFor(); fFib.print(); } protected void init() { this.name = &quot;For&quot;; long[] f = new long[] {0,1}; for (int i = 0; i &lt; this.size; i++) { this.setData(f[0]); f = new long[] {f[1], f[0] + f[1]}; } } } fiboFor.main(null) . Init method = For fibonacci Number 10 = 34 fibonacci List = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] fibonacci Hashmap = {0=[0], 1=[0, 1], 2=[0, 1, 1], 3=[0, 1, 1, 2], 4=[0, 1, 1, 2, 3], 5=[0, 1, 1, 2, 3, 5], 6=[0, 1, 1, 2, 3, 5, 8], 7=[0, 1, 1, 2, 3, 5, 8, 13], 8=[0, 1, 1, 2, 3, 5, 8, 13, 21], 9=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34]} fibonacci Sequence 1 = [0] fibonacci Sequence 2 = [0, 1] fibonacci Sequence 3 = [0, 1, 1] fibonacci Sequence 4 = [0, 1, 1, 2] fibonacci Sequence 5 = [0, 1, 1, 2, 3] fibonacci Sequence 6 = [0, 1, 1, 2, 3, 5] fibonacci Sequence 7 = [0, 1, 1, 2, 3, 5, 8] fibonacci Sequence 8 = [0, 1, 1, 2, 3, 5, 8, 13] fibonacci Sequence 9 = [0, 1, 1, 2, 3, 5, 8, 13, 21] fibonacci Sequence 10 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] . // Recursion public class fiboRecur extends Fibo { public fiboRecur() { this(10); } public fiboRecur(int nth) { this.size = nth; this.list = new ArrayList&lt;&gt;(); this.hashID = 0; this.hash = new HashMap&lt;&gt;(); this.init(); } static public void main(String[] args) { fiboRecur rFib = new fiboRecur(); rFib.print(); } protected void recur(long[] f, int i) { this.setData(f[0]); f = new long[]{f[1], f[0] + f[1]}; i=i+1; if (i &lt; this.size) { this.recur(f, i); } } protected void init() { this.name = &quot;Recursion&quot;; int i = 0; long[] f = new long[] {0,1}; this.recur(f, i); } } fiboRecur.main(null) . | // Recursion | public class fiboRecur extends Fibo { | public fiboRecur() { | this(10); | } | public fiboRecur(int nth) { | this.size = nth; | this.list = new ArrayList&lt;&gt;(); | this.hashID = 0; | this.hash = new HashMap&lt;&gt;(); | this.init(); | } | static public void main(String[] args) { | fiboRecur rFib = new fiboRecur(); | rFib.print(); | } | protected void recur(long[] f, int i) { | this.setData(f[0]); | f = new long[]{f[1], f[0] + f[1]}; | i=i+1; | if (i &lt; this.size) { | this.recur(f, i); | } | | } | protected void init() { | this.name = &#34;Recursion&#34;; | int i = 0; | long[] f = new long[] {0,1}; | this.recur(f, i); | } | } Unresolved dependencies: - class Fibo - variable size - variable list - variable hashID - variable hash - method print() - method setData(long) - variable name .",
            "url": "https://ninjabreadlord.github.io/chengfastpages/2022/09/25/fibonacci.html",
            "relUrl": "/2022/09/25/fibonacci.html",
            "date": " • Sep 25, 2022"
        }
        
    
  
    
        ,"post17": {
            "title": "Javascript Practice",
            "content": "Javascript Practice . Using Javascript along with JSON | . Enter Value . Your Words . .",
            "url": "https://ninjabreadlord.github.io/chengfastpages/week5/js-table",
            "relUrl": "/week5/js-table",
            "date": " • Sep 25, 2022"
        }
        
    
  
    
        ,"post18": {
            "title": "Javascript Practice",
            "content": "Javascript Practice . Using Javascript along with JSON | . Enter Value . Your Words . .",
            "url": "https://ninjabreadlord.github.io/chengfastpages/week5/js-table",
            "relUrl": "/week5/js-table",
            "date": " • Sep 23, 2022"
        }
        
    
  
    
        ,"post19": {
            "title": "2022-09-13 2D Arrays",
            "content": "class BirdsLoop { String [][] birds; public BirdsLoop(){ birds = new String[][]{ { &quot;/ / &quot;, &quot;((ovo))&quot;, &quot;():::()&quot;, &quot;VVV&quot; }, { &quot;/ / &quot;, &quot;((ovo))&quot;, &quot;():::()&quot;, &quot;VVV&quot; }, { &quot;/ / &quot;, &quot;((ovo))&quot;, &quot;():::()&quot;, &quot;VVV&quot; }, { &quot;/ / &quot;, &quot;((ovo))&quot;, &quot;():::()&quot;, &quot;VVV&quot; }, { &quot;/ / &quot;, &quot;((ovo))&quot;, &quot;():::()&quot;, &quot;VVV&quot; }, }; } public void printPoem() { System.out.println(); System.out.println(&quot;Birds Flying Poem in Java Loopy&quot;); System.out.println(&quot;&quot;); int birdsCount = birds.length; for (int i = birdsCount; i &gt;= 1; i--) { System.out.println(i + &quot; birds flying in the house...&quot;); int partCount = birds[0].length; for (int row = 0; row &lt; partCount; row++) { for (int col = 0; col &lt; birdsCount; col++) { System.out.print(birds[col][row] + &quot; &quot;); } System.out.println(); } System.out.println(&quot;One got caught and lost his head.&quot;); birdsCount -= 1; } System.out.println(&quot;No more birds in the house&quot;); System.out.println(&quot;&quot;); System.out.println(&quot; THE END &quot;); } public static void main(String[] args) { new BirdsLoop().printPoem(); } } BirdsLoop.main(null); . Birds Flying Poem in Java Loopy 5 birds flying in the house... / / / / / / / / / / ((ovo)) ((ovo)) ((ovo)) ((ovo)) ((ovo)) ():::() ():::() ():::() ():::() ():::() VVV VVV VVV VVV VVV One got caught and lost his head. 4 birds flying in the house... / / / / / / / / ((ovo)) ((ovo)) ((ovo)) ((ovo)) ():::() ():::() ():::() ():::() VVV VVV VVV VVV One got caught and lost his head. 3 birds flying in the house... / / / / / / ((ovo)) ((ovo)) ((ovo)) ():::() ():::() ():::() VVV VVV VVV One got caught and lost his head. 2 birds flying in the house... / / / / ((ovo)) ((ovo)) ():::() ():::() VVV VVV One got caught and lost his head. 1 birds flying in the house... / / ((ovo)) ():::() VVV One got caught and lost his head. No more birds in the house THE END .",
            "url": "https://ninjabreadlord.github.io/chengfastpages/2022/09/13/2darrays.html",
            "relUrl": "/2022/09/13/2darrays.html",
            "date": " • Sep 13, 2022"
        }
        
    
  
    
        ,"post20": {
            "title": "Free Response Question 1",
            "content": "a) Write a static method arraySum that calculates and returns the sum of the entries in a specified . one-dimensional array. The following example shows an array arr1 and the value returned by a call to arraySum. . class DiverseArray{ public static int arraySum(int[] array){ int sum = 0; for(int i = 0; i &lt; array.length; i++){ sum = sum + array[i]; } return sum; } public static void main(String[] args){ int[] fram = {1,3,4,5,6}; int x= arraySum(fram); System.out.print(x); } } DiverseArray.main(null); . 19 . Write a static method rowSums that calculates the sums of each of the rows in a given twodimensional array and returns these sums in a one-dimensional array. The method has one parameter, a twodimensional array arr2D of int values. The array is in row-major order: arr2D[r][c] is the entry at row r and column c. The method returns a one-dimensional array with one entry for each row of arr2D such that each entry is the sum of the corresponding row in arr2D. As a reminder, each row of a two-dimensional array is a one-dimensional array.For example, if mat1 is the array represented by the following table, the call rowSums(mat1) returns the array {16, 32, 28, 20}. . class DiverseArray2{ public static int arraySum(int[] array){ int sum = 0; for(int i = 0; i &lt; array.length; i++){ sum = sum + array[i]; } return sum; } public static int[] rowSums(int[][] array){ int[] sum = new int[array.length]; for(int g = 0; g &lt; array.length; g++){ int sum1 = arraySum(array[g]); sum[g] = (sum1); } return sum; } public static void main(String[] args){ int[][] fram = new int[][] { {1,2,3}, {1,2,3,4}, {3,2,1,0} }; int[] x = rowSums(fram); for(int j = 0;j &lt; x.length; j++){ System.out.print(x[j] + &quot;, &quot;); } } } DiverseArray2.main(null); . 6, 10, 6, . c) A two-dimensional array is diverse if no two of its rows have entries that sum to the same value. In the following examples, the array mat1 is diverse because each row sum is different, but the array mat2 is not diverse because the first and last rows have the same sum . class DiverseArray3{ public static int arraySum(int[] array){ int sum = 0; for(int i = 0; i &lt; array.length; i++){ sum = sum + array[i]; } return sum; } public static int[] rowSums(int[][] array){ int[] sum = new int[array.length]; for(int g = 0; g &lt; array.length; g++){ int sum1 = arraySum(array[g]); sum[g] = (sum1); } return sum; } public static boolean isDiverse(int[][] arr2d){ boolean isDiverse = true; int[] cheese = rowSums(arr2d); for (int i = 0; i &lt; cheese.length; i++) { int burger = cheese[i]; for (int j = i + 1; j &lt; cheese.length; j++) { if (burger == cheese[j]) { isDiverse = false; } } } return isDiverse; } public static void main(String[] args){ int[][] fram = new int[][] { {1,2,3}, {1,2,3}, {3,2,1,0} }; System.out.println(&quot;is &quot; + isDiverse(fram)); int[][] fram2 = new int[][] { {1,2,3}, {1,2,3,4,5}, {5,5,5,5} }; System.out.println(&quot;is &quot; + isDiverse(fram2)); } } DiverseArray3.main(null); . is false is true .",
            "url": "https://ninjabreadlord.github.io/chengfastpages/2022/09/12/frq1.html",
            "relUrl": "/2022/09/12/frq1.html",
            "date": " • Sep 12, 2022"
        }
        
    
  
    
        ,"post21": {
            "title": "Focus and Habits",
            "content": "Focus and Habits . Learnings from the video . Healthy practices in life actually matter | Social interaction is integral | Make a social conncetion with those around you: family, friends, etc. | Try to be present as much as you can | . Blog goals . Potentially begin area of blogs discussing topics I enjoy(undecided) | Try to put in more effort into code learnings from collegeboard | Possible resume, or additions to current resume | .",
            "url": "https://ninjabreadlord.github.io/chengfastpages/2022/09/11/focusandhabits.html",
            "relUrl": "/2022/09/11/focusandhabits.html",
            "date": " • Sep 11, 2022"
        }
        
    
  
    
        ,"post22": {
            "title": "2022-09-07 Booleans and Ifs",
            "content": "Notes on Conditionals . De Morgan&#39;s law - opposite of everything in the statement | Example: if (!((false || !true) || (false &amp;&amp; true))) { . | When there are too many conditions in the if statement itself, then it becomes poor code | &amp;&amp;, ||, ! - And, or, and Not symbols respectively | . Hacks . if is the simple statement with a conditional within it, if this condition is met, the code inside is run | if-else a second conditional statement on top of the already existing if | if-else if-else are multiple conditional statements on top of the existing if statement | . import java.util.*; class Main{ public static void main(String args[]){ boolean position = true; boolean velocity = true; boolean acceleration = true; Scanner input = new Scanner(System.in); for(int i = 0; i &lt; 2; i++){ System.out.print(&quot;velocity or no: &quot;); String words = input.nextLine(); System.out.println(words); if(words.equals(&quot;yes&quot;)){ velocity = false; position = true ; }else { acceleration = true; position = true; velocity = true; } if (position &amp;&amp; velocity &amp;&amp; acceleration) { System.out.println(&quot;it gets there&quot;); } else if (!position || !velocity) { System.out.println(&quot;it doesn&#39;t really get there&quot;); } else if (velocity &amp;&amp; !acceleration) { System.out.println(&quot;it stand still&quot;); } else if(!position){ System.out.println(&quot;is breaking&quot;); } } } } Main.main(null); . velocity or no: it gets there velocity or no: it gets there . Using Switches . import java.util.*; class Main{ public static void main(String args[]){ boolean position = true; boolean velocity = true; boolean acceleration = true; for(int i = 0; i &lt; 2; i++){ Scanner input = new Scanner(System.in); System.out.print(&quot;velocity or no: &quot;); String words = input.nextLine(); System.out.println(words); switch(words){ case (&quot;yes&quot;): velocity = false; position = true ; break; case (&quot;no&quot;): acceleration = true; position = true; velocity = true; break; default: System.out.print(&quot;Try a different input&quot;); break; } if (position &amp;&amp; velocity &amp;&amp; acceleration) { System.out.println(&quot;it gets there&quot;); } else if (!position || !velocity) { System.out.println(&quot;it doesn&#39;t really get there&quot;); } else if (velocity &amp;&amp; !acceleration) { System.out.println(&quot;it stand still&quot;); } else if(!position){ System.out.println(&quot;is breaking&quot;); } } } } Main.main(null); . velocity or no: Ok Try a different inputit gets there velocity or no: ok Try a different inputit gets there . DeMorgan&#39;s Law . Basically the usage of negation in front of a conditional | Not (A and B) is the same as Not A or Not B. | Not (A or B) is the same as Not A and Not B. | *Use ! for not | . int x = 1; int y = 2; if(!(x &lt; 2 &amp;&amp; y &gt; 1)){ System.out.println(&quot;Hello&quot;); } else if(!(x &lt; 2 || y &gt; 1)){ System.out.println(&quot;Good Day&quot;); } .",
            "url": "https://ninjabreadlord.github.io/chengfastpages/apcsa/2022/09/07/booleansandifs.html",
            "relUrl": "/apcsa/2022/09/07/booleansandifs.html",
            "date": " • Sep 7, 2022"
        }
        
    
  
    
        ,"post23": {
            "title": "Plans",
            "content": "Capturing information from Collegeboard . With Collegeboard’s 10 units I hope to capture most of the information from there onto JupyterNotebook. With each CollegeBoard unit I plan on creating a seperate notebook entailing all the information and details. For certain units I may try and apply that using the kernels on each notebooks | For FRQs I believe that a similar method should be used, I’ll likely organize frq questions into seperate folders with code answering the questions. | . Recognizing Collegeboard vs PBL . Continuing off of what I stated before, I hope to have seperate folders and tags(WIP) for Collegeboard materials and information. | PBL will be placed in a seperate folder and tagging system. | .",
            "url": "https://ninjabreadlord.github.io/chengfastpages/2022/08/28/plansforcollegeboard.html",
            "relUrl": "/2022/08/28/plansforcollegeboard.html",
            "date": " • Aug 28, 2022"
        }
        
    
  
    
        ,"post24": {
            "title": "2022-08-25 Bash Notes",
            "content": "Installlation . pip install bash_kernel | python -m bash_kernel.install | . echo &quot;Using conditional statement to create a project directory and project&quot; # Variable section export project_dir=$HOME/vscode # change vscode to different name to test git clone export project=$project_dir/APCSA # change APCSP to name of project from git clone export project_repo=&quot;https://github.com/nighthawkcoders/APCSA.git&quot; # change to project of choice cd ~ # start in home directory # Conditional block to make a project directory if [ ! -d $project_dir ] then echo &quot;Directory $project_dir does not exists... makinng directory $project_dir&quot; mkdir -p $project_dir fi echo &quot;Directory $project_dir exists.&quot; # Conditional block to git clone a project from project_repo if [ ! -d $project ] then echo &quot;Directory $project does not exists... cloning $project_repo&quot; cd $project_dir git clone $project_repo cd ~ fi echo &quot;Directory $project exists.&quot; . Using conditional statement to create a project directory and project Directory /home/everittcheng/vscode exists. Directory /home/everittcheng/vscode/APCSA exists. . &quot;cat&quot; command shows you text from inside the file | &quot;env&quot; shows enviroment | &quot;.git&quot; hidden file that keeps track of your merges, basically keeps your machine and the github cloud server in check to see when files need to change | . Hacks . Verifying installed tools . Anaconda to verify that google exists . export PATH=~/anaconda3/bin:$PATH # conda not found without this command echo Conda Check # test for a kernel installation test=&quot;google&quot; # keyword check=`conda list | grep $test` # run command n=${#check} # determine length if [[ ${n} &gt; 0 ]]; # testt length then # greater than zero echo &quot;$check&quot; else # less than zero echo &quot;$test not found&quot; fi . Conda Check google-api-core 1.25.1 pyhd3eb1b0_0 google-auth 1.33.0 pyhd3eb1b0_0 google-cloud-core 1.7.1 pyhd3eb1b0_0 google-cloud-storage 1.31.0 py_0 google-crc32c 1.1.2 py39h27cfd23_0 google-resumable-media 1.3.1 pyhd3eb1b0_1 googleapis-common-protos 1.53.0 py39h06a4308_0 . Check if I have bash . test=&quot;bash&quot; # keyword check=`jupyter kernelspec list | grep $test` # run command n=${#check} # determine length if [[ ${n} &gt; 0 ]]; # testt length then # greater than zero echo &quot;$check&quot; else # less than zero echo &quot;$test not found&quot; fi . bash /home/everittcheng/.local/share/jupyter/kernels/bash . Check for python . test=&quot;python3&quot; # keyword check=`jupyter kernelspec list | grep $test` # run command n=${#check} # determine length if [[ ${n} &gt; 0 ]]; # testt length then # greater than zero echo &quot;$check&quot; else # less than zero echo &quot;$test not found&quot; fi . python3 /home/everittcheng/.local/share/jupyter/kernels/python3 . Update repository . cd $project echo &quot;Updating..............&quot; git pull . Updating.............. Already up to date. .",
            "url": "https://ninjabreadlord.github.io/chengfastpages/apcsa/2022/08/25/bashnotebooknotes.html",
            "relUrl": "/apcsa/2022/08/25/bashnotebooknotes.html",
            "date": " • Aug 25, 2022"
        }
        
    
  
    
        ,"post25": {
            "title": "2022-08-23 Primitive Notes",
            "content": "Primitives . Basica bread and butter variable types(ie: String, int, etc.) | . Wrapper Classes . Wrappers usually uppercase in defining variable | Most in Java is OOP exclude primitives | . Hacks . import java.util.*; public class SimpleCalculator { public static void main(String[] args) { Scanner input1 = new Scanner(System.in); System.out.println(&quot;Enter an integer for joe: &quot;); int joe = input1.nextInt(); input1.close(); Scanner input2 = new Scanner(System.in); System.out.println(&quot;Enter a integer for joey: &quot;); int joey = input2.nextInt(); input2.close(); double amogus = (double) joe + joey; String joseph = &quot;Hello I am Joseph&quot;; System.out.println(&quot;I want to add joe and joey&quot;); Scanner input3 = new Scanner(System.in); System.out.println(&quot;Do I add joe and joey(True/False): &quot;); boolean joel = input3.nextBoolean(); if(joel){ System.out.println(joseph + &quot;, if I add joe(&quot; + joe + &quot;) and joey(&quot; + joey + &quot;) it gets me &quot; + amogus); }else{ System.out.println(&quot;I guess joe and joey will never meet. The name&#39;s Joseph by the way&quot;); } } } SimpleCalculator.main(null); . Enter an integer for joe: Enter a integer for joey: I want to add joe and joey Do I add joe and joey(True/False): Hello I am Joseph, if I add joe(12) and joey(123) it gets me 135.0 . Seconds to Fortnight Converter . import java.util.*; public class main{ public static double fortnightConverter(double fortnight) { double days = fortnight*14; double seconds = days * 86400; return seconds; } public static void main(String[] args){ Scanner input = new Scanner(System.in); System.out.println(&quot;How many fortnights?: &quot;); double fortnight = input.nextDouble(); System.out.println(fortnight + &quot; fortnight in seconds is: &quot; + fortnightConverter(fortnight)); } } main.main(null); . How many fortnights?: 1.0 fortnight in seconds is: 1209600.0 .",
            "url": "https://ninjabreadlord.github.io/chengfastpages/apcsa/2022/08/23/primitives-notes.html",
            "relUrl": "/apcsa/2022/08/23/primitives-notes.html",
            "date": " • Aug 23, 2022"
        }
        
    
  
    
        ,"post26": {
            "title": "Code Testing Python",
            "content": "Here is some Python code. It should be a simple function that prints out &quot;Hello&quot;. . print(&quot;Hello&quot;) . Hello .",
            "url": "https://ninjabreadlord.github.io/chengfastpages/apcsa/2022/08/21/pythoncodetest.html",
            "relUrl": "/apcsa/2022/08/21/pythoncodetest.html",
            "date": " • Aug 21, 2022"
        }
        
    
  
    
        ,"post27": {
            "title": "Code Testing Java",
            "content": "Here is some Java code. Testing the print function, should print &quot;Hello&quot;. . System.out.println(&quot;Hello&quot;) . Hello .",
            "url": "https://ninjabreadlord.github.io/chengfastpages/apcsa/2022/08/21/javacodetest.html",
            "relUrl": "/apcsa/2022/08/21/javacodetest.html",
            "date": " • Aug 21, 2022"
        }
        
    
  
    
        ,"post28": {
            "title": "First Post",
            "content": "Hello . This is my first post, just testing out markdown . I am excited for APCSA this year | . Link back to main page .",
            "url": "https://ninjabreadlord.github.io/chengfastpages/apcsa/2022/08/21/firstpost.html",
            "relUrl": "/apcsa/2022/08/21/firstpost.html",
            "date": " • Aug 21, 2022"
        }
        
    
  
    
        ,"post29": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://ninjabreadlord.github.io/chengfastpages/apcsa/2020/02/20/test.html",
            "relUrl": "/apcsa/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post30": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://ninjabreadlord.github.io/chengfastpages/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://ninjabreadlord.github.io/chengfastpages/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
      ,"page3": {
          "title": "APCSA Notes",
          "content": "Vocab and notes on APCSA concepts throughout 2022-2023 . Table of Contents . Week 1 Notes .",
          "url": "https://ninjabreadlord.github.io/chengfastpages/notes/",
          "relUrl": "/notes/",
          "date": ""
      }
      
  

  
  

  

  
  

  

  
  

  
  

  
  

  

  

  
  

  
      ,"page14": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://ninjabreadlord.github.io/chengfastpages/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}